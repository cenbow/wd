package com.okwei.util;

import java.net.URLEncoder;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;

public class HttpClientUtil {

	public static String doGetMethod(String url, Map<String, String> keyValueMap) {
		// Protocol myhttps = new Protocol("https", new
		// MySecureProtocolSocketFactory (), 443);
		// Protocol.registerProtocol("https", myhttps);
		HttpClient client = new HttpClient();

		StringBuffer sb = new StringBuffer(url);
		PostMethod postMethod = null;
		try {
			// 设置请求参数
			if (keyValueMap != null) {
				Iterator it = keyValueMap.entrySet().iterator();
				if (keyValueMap.size() > 0) {
					sb.append("?");
					while (it.hasNext()) {
						Map.Entry<String, String> entry = (Map.Entry<String, String>) it.next();
						if (entry != null && entry.getValue() != null) {
							sb.append(entry.getKey() + "=" + URLEncoder.encode(entry.getValue(), "UTF-8") + "&");
						}
					}
					sb.deleteCharAt(sb.length() - 1);
				}

			}
			postMethod = new PostMethod(sb.toString());
			postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler());
			postMethod.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");
			// todo:设置超时时间
			postMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, 200000);
			int statusCode = client.executeMethod(postMethod);
			if (statusCode != HttpStatus.SC_OK) {
				return "调用外部链接异常！";
			}
			String responseBody = postMethod.getResponseBodyAsString();
			return responseBody;
		} catch (Exception e) {
			return e.getMessage();
		} finally {
			if (postMethod != null) {
				postMethod.releaseConnection();
			}
		}
	}
}
