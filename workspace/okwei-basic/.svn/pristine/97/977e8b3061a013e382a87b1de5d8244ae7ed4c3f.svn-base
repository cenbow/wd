package com.okwei.dao.impl.product;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.okwei.bean.domain.AActProductsShowTime;
import com.okwei.bean.domain.AActShowProducts;
import com.okwei.bean.domain.AActivity;
import com.okwei.bean.domain.AActivityProducts;
import com.okwei.bean.domain.PProducts;
import com.okwei.bean.vo.activity.ActProductInfo;
import com.okwei.dao.impl.BaseDAO;
import com.okwei.dao.product.IProductSearchDao;
import com.okwei.util.RedisUtil;

@Repository
public class ProductSearchDao extends BaseDAO implements IProductSearchDao {

	// 缓存头部
	private String headkeyName = "Product_redis_";

	public PProducts getPProducts(Long productID) {
		String key = headkeyName + "pid_" + productID;
		PProducts products = (PProducts) RedisUtil.getObject(key);
		if (products != null)
			return products;
		else {
			products = super.get(PProducts.class, productID);
			if (products != null) {
				RedisUtil.setObject(key, products, 60);// 1分钟缓存
				return products;
			}
		}
		return null;
	}

	/**
	 * 判断产品是否参加活动（为结束的活动）
	 * 
	 * @param productId
	 * @return
	 */
	public ActProductInfo get_ProductAct(Long productId) {
		if (productId == null || productId <= 0)
			return null;
		// 分块进行缓存 缓存活动中的产品
		String keyName = headkeyName + "piece_" + (productId % 1000);
		
		Map<Long, ActProductInfo> map = (Map<Long, ActProductInfo>) RedisUtil.getObject(keyName);
		Date nowtime = new Date();
		boolean needNew = false;// 是否需要查询数据库 进行更新缓存
		if (map != null && map.values().size() > 0) {
			if (map.containsKey(productId)) {
				ActProductInfo info = map.get(productId);
				if (info.getEndTime().getTime() > nowtime.getTime())
					return info;
				else {
					map.remove(productId);
					needNew = true;
				}
			} else {
				needNew = true;
			}
		} else {
			map = new HashMap<Long, ActProductInfo>();
			needNew = true;
		}
		if (needNew) {//需要检测数据库 ，产品是否在活动中
			//缓存不在活动中的产品（短期缓存）
			String keyNameNot= headkeyName + "notin_piece_" + (productId % 1000);
			Map<Long, Long> mapNot =  (Map<Long, Long>) RedisUtil.getObject(keyNameNot);
			if(mapNot!=null&&mapNot.values().size()>0){
				if(mapNot.containsKey(productId))
					return null;
			}else {
				mapNot=new HashMap<Long, Long>();
			}
			// --------新增--------
			AActProductsShowTime actPro = getAActProductsShowTime(productId, false);
			if (actPro != null) {
				ActProductInfo info2 = returnActProductInfo(actPro);
				map.put(productId, info2);
				RedisUtil.setObject(keyName, map);
				return info2;
			}else {//如果产品不在活动中，那么进行短期缓存，以减轻数据库判断压力
				mapNot.put(productId, productId);
				RedisUtil.setObject(keyNameNot, mapNot,1800); 
			}
		}
		return null;
	}

	private AActProductsShowTime getAActProductsShowTime(Long productId, boolean isGoing) {
		StringBuilder sb = new StringBuilder();
		Date nowtime = new Date();
		sb.append(" from AActProductsShowTime a where a.productId=:proid ");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("proid", productId);
		if (isGoing) {
			sb.append(" and a.beginTime<=:nowtime and a.endTime>=:nowtime ");
			map.put("nowtime", nowtime);
		} else {
			sb.append(" and  a.endTime>=:nowtime order by a.beginTime desc");
			map.put("nowtime", nowtime);
		}
		List<AActProductsShowTime> list = super.findByMap(sb.toString(), map);
		if (list != null && list.size() > 0) {
			AActProductsShowTime result = list.get(0);
			AActShowProducts actShowProducts = super.get(AActShowProducts.class, result.getProActId());
			if (actShowProducts != null) {
				return result;
			}
		}
		return null;
	}

	/**
	 * 返回 ActProductInfo
	 * 
	 * @param cc
	 * @return
	 */
	private ActProductInfo returnActProductInfo(AActProductsShowTime cc) {
		if (cc != null) {
			AActivityProducts products = super.get(AActivityProducts.class, cc.getProActId());
			if (products != null) {
				AActivity activity = super.get(AActivity.class, products.getActId());
				ActProductInfo result = new ActProductInfo();
				result.setActiveType(activity.getType());
				result.setProductId(cc.getProductId());
				result.setProActId(cc.getProActId());
				result.setBeginTime(cc.getBeginTime());
				result.setEndTime(cc.getEndTime());
				return result;
			}
		}
		return null;
	}

}
