package com.okwei.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.okwei.bean.domain.DAgentInfo;
import com.okwei.bean.domain.DBrandImgs;
import com.okwei.bean.domain.DBrandIndustry;
import com.okwei.bean.domain.DBrandSupplier;
import com.okwei.bean.domain.DBrands;
import com.okwei.bean.domain.DBrandsExt;
import com.okwei.bean.domain.DBrandsInfo;
import com.okwei.bean.domain.DCastellans;
import com.okwei.bean.domain.PProductStyles;
import com.okwei.bean.domain.UShopInfo;
import com.okwei.bean.domain.UWeiSeller;
import com.okwei.bean.dto.SantoMgtDTO;
import com.okwei.bean.enums.UserIdentityType;
import com.okwei.bean.enums.agent.AgentType;
import com.okwei.bean.enums.agent.BrandType;
import com.okwei.bean.enums.agent.CastellanType;
import com.okwei.bean.vo.ReturnModel;
import com.okwei.bean.vo.ReturnStatus;
import com.okwei.bean.vo.SantoMgtVO;
import com.okwei.bean.vo.product.ProductAuditVO;
import com.okwei.common.Limit;
import com.okwei.common.PageResult;
import com.okwei.dao.IBaseDAO;
import com.okwei.dao.user.IUUserAssistMgtDAO;
import com.okwei.service.IBasicShoppingCartService;
import com.okwei.service.ISantoMgtService;
import com.okwei.service.TRegionalService;
import com.okwei.util.DateUtils;
import com.okwei.util.ParseHelper;


@Service
public class SantoMgtService extends BaseService implements ISantoMgtService {

	@Autowired
	private IBaseDAO baseDAO;
	@Autowired
	private TRegionalService regionalService;
	@Autowired
	private IUUserAssistMgtDAO iUUserAssistMgtDAO;
	@Autowired
	private IBasicShoppingCartService iShoppingCartService;
	@Override
	public PageResult<SantoMgtVO> findPageSanto(SantoMgtDTO sMgtDTO, Limit limit) {
		String hql = "select a.brandId as brandId,b.weiId as weiId,b.logo as logo,"
				+ "b.headName as headName,b.brandName as brandName,a.createTime as createTime,"
				+ "b.phoneNumber as phoneNumber,a.landLine as landLine,"
				+ "a.province as province,a.city as city,a.district as district,a.addressDetail as addressDetail,"
				+ "a.main as main,a.securityDeposit as securityDeposit,a.costs as costs,a.payedType as payedType,"
				+ "a.companyName as companyName,a.companyProfile as companyProfile,a.characteristics as characteristics,"
				+ "a.conditions as conditions,a.agency as agency,a.bLicense as profitImg from DBrandsInfo as a,DBrands as b"
				+ " where a.brandId=b.brandId ";
		Map<String, Object> para = new HashMap<String, Object>();
		if (sMgtDTO.getProvince() != null&&sMgtDTO.getProvince()>0) {
			hql +=  " and a.province =:province";
			para.put("province", sMgtDTO.getProvince());
		}
		if(sMgtDTO.getBrandId()!=null&&sMgtDTO.getBrandId()>0){
			hql +=  " and a.brandId =:brandId";
			para.put("brandId", sMgtDTO.getBrandId());
		}
		if (sMgtDTO.getDistrict() != null&&sMgtDTO.getDistrict()>0) {
			hql +=  " and a.district =:district";
			para.put("district", sMgtDTO.getDistrict());
		}
		if (sMgtDTO.getCity() !=null&&sMgtDTO.getCity()>0) {
			hql +=  " and a.city =:city";
			para.put("city", sMgtDTO.getCity());
		}
		if (sMgtDTO.getCreateTime() != null&&""!=sMgtDTO.getCreateTime()) {
			hql += " and a.createTime>=:createdate";
			para.put("createdate",
					DateUtils.format(sMgtDTO.getCreateTime(), "yyyy-MM-dd"));
		}
		if (sMgtDTO.getBrandName() != null && "" != sMgtDTO.getBrandName()) {
			hql +=  " and b.brandName like '%" + sMgtDTO.getBrandName()
					+ "%'";
		}
		if (sMgtDTO.getWeiId() != null && sMgtDTO.getWeiId() > 0) {
			hql +=  " and b.weiId =:weiId";
			para.put("weiId", sMgtDTO.getWeiId());
		}
		hql += " ORDER BY a.createTime DESC";
		PageResult<SantoMgtVO> pageResult= baseDAO.findPageResultTransByMap(hql.toString(),SantoMgtVO.class, limit,para);
		List<Integer> brandId = new ArrayList<Integer>();
			if (pageResult != null&&pageResult.getList()!=null&&pageResult.getList().size()>0) {
				for (SantoMgtVO stmMgtVO : pageResult.getList()) {
					if(stmMgtVO.getProvince()!=null&&stmMgtVO.getDistrict()!=null&&stmMgtVO.getProvince()>0&&stmMgtVO.getDistrict()>0){
						stmMgtVO.setShowarea(regionalService.getNameByCode(stmMgtVO.getProvince())+"-"+regionalService.getNameByCode(stmMgtVO.getCity())+"-"+regionalService.getNameByCode(stmMgtVO.getDistrict()));
					}
					if(stmMgtVO.getBrandId()!=null&&stmMgtVO.getBrandId()>0){
						if(!brandId.contains(stmMgtVO.getBrandId())){
							brandId.add(stmMgtVO.getBrandId());
						}
					}
				}
			}else{
				return null;
			}
			Map<String, Object> params = new HashMap<String, Object>();
			if(brandId!=null&&brandId.size()>0){
				params.put("brandId", brandId);
			}
			List<DBrandSupplier> dbslist = baseDAO.findByMap("from DBrandSupplier where brandId in(:brandId)", params);
			List<DBrandsExt> dbelist = baseDAO.findByMap("from DBrandsExt where brandId in(:brandId)", params);
			List<DBrandImgs> dBrlist = baseDAO.findByMap("from DBrandImgs where brandId in(:brandId)", params);
			List<DBrandIndustry> dBilist = baseDAO.findByMap("from DBrandIndustry where brandId in(:brandId)", params);
			if (pageResult != null&&pageResult.getList()!=null&&pageResult.getList().size()>0) {
				for (SantoMgtVO stmMgtVO : pageResult.getList()) {
					if(dBrlist!=null&&dBrlist.size()>0){
						for (DBrandImgs dimg : dBrlist) {
							if(dimg!=null&&stmMgtVO.getBrandId()==dimg.getBrandId()&&dimg.getImg()!=null&&dimg.getImg().toString()!=null){
								stmMgtVO.getHtimg().add(dimg.getImg().toString());
								break;
							}
						}
					}
					if(dbslist!=null&&dbslist.size()>0){
						for (DBrandSupplier dBs : dbslist) {
							if(dBs!=null&&dBs.getBrandId().intValue()==stmMgtVO.getBrandId().intValue()){
								stmMgtVO.setType(dBs.getType());
								break;
							}
						}
					}
					if(stmMgtVO.getCreateTime()!=null){
						stmMgtVO.setCreateTimes(DateUtils.formatDateTime(stmMgtVO.getCreateTime()));
					}
					if(dBilist!=null&&dBilist.size()>0){
						for (DBrandIndustry industry : dBilist) {
							if(stmMgtVO.getBrandId()==industry.getBrandId()){
								stmMgtVO.setIndustry(industry.getName());
								break;
							}
						}	
					}
					if(dbelist!=null&&dbelist.size()>0){
						for (DBrandsExt dBe : dbelist) {
							if(stmMgtVO.getBrandId()==dBe.getBrandId()){		
								stmMgtVO.setViceCastellanInCount(dBe.getViceCastellanOutCount());
								stmMgtVO.setViceCastellanOutCount(dBe.getViceCastellanOutCount());
								stmMgtVO.setAgentOutCount(dBe.getAgentOutCount());
								stmMgtVO.setAgentInCount(dBe.getAgentInCount());
								stmMgtVO.setCastellanInCount(dBe.getCastellanInCount());
								stmMgtVO.setCastellanOutCount(dBe.getCastellanOutCount());	
								break;
							}	
						}
					}
				}
			}	
			return pageResult;
	}

	@Override
	public ReturnModel getSantoDTO(String json) {
		// TODO Auto-generated method stub
		ReturnModel returnModel = new ReturnModel();
		try
		{   
			SantoMgtVO stMgtVO = new SantoMgtVO();
			JSONObject obj;
			obj = JSONObject.fromObject(json);
			stMgtVO.setProvince(obj.getInt("province"));
			if(stMgtVO.getProvince()==null||stMgtVO.getProvince()<1){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择省!");
				return returnModel;
			}
			stMgtVO.setCity(obj.getInt("city"));
			if(stMgtVO.getCity()==null||stMgtVO.getCity()<1){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择市!");
				return returnModel;
			}
			stMgtVO.setDistrict(obj.getInt("district"));
			if(stMgtVO.getDistrict()==null||stMgtVO.getDistrict()<1){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择区!");
				return returnModel;
			}
			//微店号
			stMgtVO.setWeiId(ParseHelper.toLong(String.valueOf(obj.get("weiId"))));
			if(stMgtVO.getWeiId()==null||stMgtVO.getWeiId().longValue()<0){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入微店号!");
				return returnModel;
			}
			if(obj.getInt("brandId")>0){
				stMgtVO.setBrandId(obj.getInt("brandId"));
			}
			//品牌名称
			stMgtVO.setBrandName(obj.getString("brandName"));
			if(stMgtVO.getBrandName() == null || "".equals(stMgtVO.getBrandName()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入品牌名称!");
				return returnModel;
			}
			//联合品牌分销
			stMgtVO.setType(obj.getInt("supplierType"));
			if(stMgtVO.getType()==0){
				stMgtVO.setType(Integer.parseInt(BrandType.personal.toString()));
				stMgtVO.setStatus(Integer.parseInt(BrandType.personal.toString()));
			}else{
				stMgtVO.setStatus(Integer.parseInt(BrandType.join.toString()));
			}
			//公司名称
			stMgtVO.setCompanyName(obj.getString("companyName"));
			if(stMgtVO.getCompanyName() == null || "".equals(stMgtVO.getCompanyName()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入公司名称!");
				return returnModel;
			}
			//负责人
			stMgtVO.setHeadName(obj.getString("linkMan"));
			if(stMgtVO.getHeadName() == null || "".equals(stMgtVO.getHeadName()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入负责人!");
				return returnModel;
			}
			//手机号码
			stMgtVO.setPhoneNumber(obj.getString("mobilePhone"));
			if(stMgtVO.getPhoneNumber() == null || "".equals(stMgtVO.getPhoneNumber()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入正确的手机号码!");
				return returnModel;
			}
			//电话号码
			stMgtVO.setLandLine(obj.getString("telephone"));
			/*if(stMgtVO.getLandLine() == null || "".equals(stMgtVO.getLandLine()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入正确的电话号码!");
				return returnModel;
			}*/
			
			//详细地址
			stMgtVO.setAddressDetail(obj.getString("address"));
			if(stMgtVO.getAddressDetail() == null || "".equals(stMgtVO.getAddressDetail()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入详细地址!");
				return returnModel;
			}
			//合同附件
			String fjimg =  obj.getString("fjimg");
			List<DBrandImgs> dList = new ArrayList<DBrandImgs>();
			JSONArray bArray= new JSONArray().fromObject(fjimg);
			for (int z = 0; z < bArray.size(); z++) // 遍历value
			{
				JSONObject bovalue = (JSONObject) bArray.get(z);
				String fjimgs = bovalue.getString("fjimgs");
				if(fjimgs == null || "".equals(fjimgs)  )
				{
					returnModel.setStatu(ReturnStatus.ParamError);
					returnModel.setStatusreson("请上传合同附件!");
					return returnModel;
				} 
				if(z>8){
					returnModel.setStatu(ReturnStatus.ParamError);
					returnModel.setStatusreson("只能上传9张合同附件!");
					return returnModel;
				}
				DBrandImgs dimg = new DBrandImgs();
				if(obj.getInt("brandId")>0){
					dimg.setBrandId(obj.getInt("brandId"));
				}
				dimg.setType(0);
				dimg.setImg(fjimgs.trim());
				dList.add(dimg);
			}
			//model合同附件List
			stMgtVO.setHtimgList(dList);
			//行业
			String bClassJson =  obj.getString("industryList");
			//List<DBrandIndustry> dbrList = new ArrayList<DBrandIndustry>();
			JSONArray bArrayValue = new JSONArray().fromObject(bClassJson);
			String name = "";
			DBrandIndustry dBrandIndustry = new DBrandIndustry();
			for (int z = 0; z < bArrayValue.size(); z++) // 遍历value
			{
				JSONObject bovalue = (JSONObject) bArrayValue.get(z);
				String businessClass = bovalue.getString("businessclass");
				String bussName = bovalue.getString("businessname");
				if(businessClass == null || "".equals(businessClass) || !isLong(businessClass.trim()))
				{
					returnModel.setStatu(ReturnStatus.ParamError);
					returnModel.setStatusreson("请选择所属行业!");
					return returnModel;
				} 
				if(bussName==null&&"".equals(bussName)){
					returnModel.setStatu(ReturnStatus.ParamError);
					returnModel.setStatusreson("请选择所属行业!");
					return returnModel;
				}
				if(obj.getInt("brandId")>0){
					dBrandIndustry.setBrandId(obj.getInt("brandId"));
				}
				//dBrandIndustry.setIndustryId(Integer.parseInt(businessClass.trim()));
				dBrandIndustry.setIndustryId(z);
				name+=bussName.trim()+"、";
				dBrandIndustry.setName(name);	
				//dbrList.add(dBrandIndustry);
			}
			if(name!=null&&!"".equals(name)){
				stMgtVO.setIndustry(name);
				stMgtVO.setdBi(dBrandIndustry);
			}
			//model行业List
			//stMgtVO.setDbrList(dbrList);
			//主营
			stMgtVO.setMain(obj.getString("saleType"));
			/*if(stMgtVO.getMain() == null ||"".equals(stMgtVO.getMain()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入主营!");
				return returnModel;
			}*/
			//bond
			stMgtVO.setIstype(ParseHelper.toInt(String.valueOf(obj.get("type"))));
			stMgtVO.setSecurityDeposit(ParseHelper.toDouble(String.valueOf(obj.get("bond"))));
			if(stMgtVO.getSecurityDeposit() <0)
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("保证金参数错误!");
				return returnModel;
			}
			//代理费用
			stMgtVO.setAgency(ParseHelper.toDouble(String.valueOf(obj.get("agency"))));
			if(stMgtVO.getAgency() < 0)
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("代理费参数错误!");
				return returnModel;
			}
			//入场费
			stMgtVO.setCosts(ParseHelper.toDouble(String.valueOf(obj.get("admission"))));
			if(stMgtVO.getCosts() < 0)
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("入场费参数错误!");
				return returnModel;
			}
			//支付类型
			/*stMgtVO.setPayedType(obj.getInt("payedType"));
			if(stMgtVO.getPayedType() < 0)
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("支付类型参数错误!");
				return returnModel;
			}*/
			//logo图
			stMgtVO.setLogo(obj.getString("logoImage"));
			if(stMgtVO.getLogo()==null||"".equals(stMgtVO.getLogo())){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请上传Logo图片!");
				return returnModel;
			}
			//营业执照
			stMgtVO.setProfitImg(obj.getString("profitImg"));
			if(stMgtVO.getProfitImg()==null||"".equals(stMgtVO.getProfitImg())){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请上传Logo图片!");
				return returnModel;
			}
			//公司简介
			stMgtVO.setCompanyProfile(obj.getString("details"));
			//换行符替换<br>
			stMgtVO.setCompanyProfile(stMgtVO.getCompanyProfile().replace("\n", "<br>"));
			//品牌特色
			stMgtVO.setCharacteristics(obj.getString("brandFeature"));
			stMgtVO.setConditions(obj.getString("conditions"));
			//换行符替换<br>
			stMgtVO.setConditions(stMgtVO.getConditions().replace("\n", "<br>"));
			stMgtVO.setCharacteristics(stMgtVO.getCharacteristics().replace("\n", "<br>"));
//			if(stMgtVO.getBrandFeature() == null || "".equals(stMgtVO.getBrandFeature()))
//			{
//				returnModel.setStatu(ReturnStatus.ParamError);
//				returnModel.setStatusreson("品牌特色参数错误!");
//				return returnModel;
//			}
			//返回对象
			returnModel.setBasemodle(stMgtVO);
			returnModel.setStatu(ReturnStatus.Success);
			returnModel.setStatusreson("成功!");
		}
		catch(Exception ex)
		{
			returnModel.setStatu(ReturnStatus.SystemError);
			returnModel.setStatusreson(ex.getMessage());
			return returnModel;
		}
		return returnModel;
	}
	public static boolean isLong(String str)
	{
		boolean Result = false;
		try {
			Long.parseLong(str);
			Result = true;
		} catch (Exception e) {
			Result = false;
		}
		return Result;
	}

	@Override
	public ReturnModel saveSantoDTO(SantoMgtVO vo) {
		ReturnModel returnModel = new ReturnModel();
		UWeiSeller usif = baseDAO.get(UWeiSeller.class, vo.getWeiId());
		if(usif == null)
		{
			returnModel.setStatu(ReturnStatus.DataError);
			returnModel.setStatusreson("该微店用户不存在");
			return returnModel;
		}
		String hql ="from DBrands where weiId=:weiId";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("weiId", vo.getWeiId());
		//判断数据是否已经存在
		if(vo.getIstype()!=2){
			List<DBrands> dbrlist= baseDAO.findByMap(hql.toString(), params);
			if(dbrlist!=null&&dbrlist.size()>0)
			{
				returnModel.setStatu(ReturnStatus.DataError);
				returnModel.setStatusreson("该品牌商户已存在!");
				return returnModel;
			}
		}
		DBrands dbd = baseDAO.getUniqueResultByHql("from DBrands where type=? and status=?",vo.getType(),vo.getStatus());
		if(dbd!=null){
			if (vo.getBrandId() != null&&vo.getBrandId()>0) {
				baseDAO.update("update DBrands set brandName =?,createTime=?,headName=?,"
						+ "logo=?,phoneNumber=?,weiId=? where brandId=?", vo.getBrandName(),new Date(),vo.getHeadName(),vo.getLogo(),vo.getPhoneNumber(),vo.getWeiId(),vo.getBrandId());
				dbd.setBrandId(vo.getBrandId());
			}else{
				dbd.setBrandName(vo.getBrandName());
				dbd.setCreateTime(new Date());
				dbd.setHeadName(vo.getHeadName());
				dbd.setCreateTime(new Date());
				dbd.setIndustry(vo.getIndustry());
				dbd.setLogo(vo.getLogo());
				dbd.setType(vo.getType());
				dbd.setStatus(vo.getStatus());
				dbd.setPhoneNumber(vo.getPhoneNumber());
				dbd.setWeiId(vo.getWeiId());
				baseDAO.save(dbd);
			}
			DBrandSupplier dbs= new DBrandSupplier();
			if(dbs!=null){
				dbs.setState(dbd.getStatus());
				dbs.setType(dbd.getType());
				dbs.setWeiId(vo.getWeiId());
				if (dbd.getBrandId() != null&&dbd.getBrandId().intValue()>0) {
					baseDAO.delete(dbs);
					dbs.setBrandId(dbd.getBrandId());
					baseDAO.save(dbs);
				}else{
					dbs.setBrandId(dbd.getBrandId());
					baseDAO.save(dbs);
				}
			}
			DBrandsInfo dbif = new DBrandsInfo();
			iUUserAssistMgtDAO.addIdentity(vo.getWeiId(), UserIdentityType.AgentBrandSupplier);
			if(vo.getWeiId()!=null&&vo.getWeiId().longValue()>0){
				dbif = baseDAO.get(DBrandsInfo.class, vo.getWeiId());
				if(dbif!=null){
					dbif.setBrandId(dbd.getBrandId().intValue());
					dbif.setProvince(vo.getProvince());
					dbif.setDistrict(vo.getDistrict());
					dbif.setCity(vo.getCity());
					dbif.setAddressDetail(vo.getAddressDetail());
					if(vo.getCompanyProfile()!=null&&!"".equals(vo.getCompanyProfile())){
						dbif.setCompanyProfile(vo.getCompanyProfile());
					}
					if(vo.getLandLine()!=null&&!"".equals(vo.getLandLine())){
						dbif.setLandLine(vo.getLandLine());
					}
					dbif.setbLicense(vo.getProfitImg());
					dbif.setCompanyName(vo.getCompanyName());
					if(vo.getCharacteristics()!=null&&!"".equals(vo.getCharacteristics())){
						dbif.setCharacteristics(vo.getCharacteristics());
					}
					if(vo.getConditions()!=null&&!"".equals(vo.getConditions())){
						dbif.setConditions(vo.getConditions());
					}
					if(vo.getMain()!=null&&!"".equals(vo.getMain())){
						dbif.setMain(vo.getMain());
					}
					dbif.setAgency(vo.getAgency());
					dbif.setCosts(vo.getCosts());
					dbif.setSecurityDeposit(vo.getSecurityDeposit());
					dbif.setCreateTime(new Date());
					dbif.setContactPhone(vo.getPhoneNumber());
					dbif.setContact(vo.getHeadName());
					dbif.setWeiID(vo.getWeiId());
					if(vo.getIstype()!=2){
						dbif.setIndustry(vo.getIndustry());
					}
					baseDAO.update(dbif);
				}else{
					DBrandsInfo dbinfo = new DBrandsInfo();
					dbinfo.setBrandId(dbd.getBrandId().intValue());
					dbinfo.setProvince(vo.getProvince());
					dbinfo.setDistrict(vo.getDistrict());
					dbinfo.setAgency(vo.getAgency());
					dbinfo.setSecurityDeposit(vo.getSecurityDeposit());
					dbinfo.setCity(vo.getCity());
					dbinfo.setAddressDetail(vo.getAddressDetail());
					if(vo.getCompanyProfile()!=null&&!"".equals(vo.getCompanyProfile())){
						dbinfo.setCompanyProfile(vo.getCompanyProfile());
					}
					if(vo.getLandLine()!=null&&!"".equals(vo.getLandLine())){
						dbinfo.setLandLine(vo.getLandLine());
					}
					dbinfo.setCosts(vo.getCosts());
					dbinfo.setbLicense(vo.getProfitImg());
					dbinfo.setCompanyName(vo.getCompanyName());
					if(vo.getCharacteristics()!=null&&!"".equals(vo.getCharacteristics())){
						dbinfo.setCharacteristics(vo.getCharacteristics());
					}
					if(vo.getConditions()!=null&&!"".equals(vo.getConditions())){
						dbinfo.setConditions(vo.getConditions());
					}
					if(vo.getMain()!=null&&!"".equals(vo.getMain())){
						dbinfo.setMain(vo.getMain());
					}
					dbinfo.setCreateTime(new Date());
					dbinfo.setContactPhone(vo.getPhoneNumber());
					dbinfo.setContact(vo.getHeadName());
					dbinfo.setWeiID(vo.getWeiId());
					if(vo.getIstype()!=2){
						dbinfo.setIndustry(vo.getIndustry());
					}
					baseDAO.save(dbinfo);
				}
				
			}
			for(DBrandImgs dImgs:vo.getHtimgList()){
				if(dbd.getBrandId() != null&&dbd.getBrandId()>0&&dImgs!=null){
					baseDAO.delete(dImgs);
					dImgs.setBrandId(vo.getBrandId());
					baseDAO.save(dImgs);
				}else{
					dImgs.setBrandId(dbd.getBrandId());
					baseDAO.save(dImgs);
				}
				
			}
			if(vo.getdBi()!=null&&vo.getdBi().toString()!=null){
				if (vo.getBrandId() != null&&vo.getBrandId().intValue()>0) {
					baseDAO.delete(vo.getdBi().getBrandId());
					vo.getdBi().setBrandId(vo.getBrandId());
					baseDAO.save(vo.getdBi());
				}
			}
		}
		returnModel.setStatu(ReturnStatus.Success);
		if(vo.getBrandId()!=null&&vo.getBrandId().intValue()>0){
			returnModel.setStatusreson("修改成功!");
		}else{
			returnModel.setStatusreson("保存成功!");
		}
		return returnModel;
	}

	@Override
	public PageResult<SantoMgtVO> findPageAgent(SantoMgtDTO sMgtDTO, Limit limit) {
		String hql = "select a.agentId as agentId,a.weiId as weiId,b.brandId as brandId,b.brandName as brandName,a.province as province,a.city as city,a.district as district,"
				+ "a.contactPhone as phoneNumber,a.qq as landLine,a.agentId as agentId,"
				+ "a.createTime as createTime,a.costs as costs from DAgentInfo as a,DBrands as b where a.brandId=b.brandId";
		Map<String, Object> para = new HashMap<String, Object>();
		if (sMgtDTO.getProvince() != null&&sMgtDTO.getProvince()>0) {
			hql +=  " and a.province =:province";
			para.put("province", sMgtDTO.getProvince());
		}
		if (sMgtDTO.getDistrict() != null&&sMgtDTO.getDistrict()>0) {
			hql +=  " and a.district =:district";
			para.put("district", sMgtDTO.getDistrict());
		}
		if (sMgtDTO.getCity() !=null&&sMgtDTO.getCity()>0) {
			hql +=  " and a.city =:city";
			para.put("city", sMgtDTO.getCity());
		}
		if (sMgtDTO.getCreateTime() != null&&""!=sMgtDTO.getCreateTime()) {
			hql += " and a.createTime>=:createdate";
			para.put("createdate",
					DateUtils.format(sMgtDTO.getCreateTime(), "yyyy-MM-dd"));
		}
		if (sMgtDTO.getBrandName() != null && "" != sMgtDTO.getBrandName()) {
			hql +=  " and b.brandName like '%" + sMgtDTO.getBrandName()
					+ "%'";
		}
		if (sMgtDTO.getWeiId() != null && sMgtDTO.getWeiId() > 0) {
			hql +=  " and b.weiId =:weiId";
			para.put("weiId", sMgtDTO.getWeiId());
		}
		if (sMgtDTO.getStatus() != null && sMgtDTO.getStatus() > 0) {
			hql +=  " and a.agentId in (select agentId from DCastellans)";
		}
		hql += " ORDER BY a.createTime DESC";
		PageResult<SantoMgtVO> pageResult= baseDAO.findPageResultTransByMap(hql.toString(),SantoMgtVO.class, limit,para);
		List<Long> agentId = new ArrayList<Long>();
		List<Long> weiId = new ArrayList<Long>();
		if (pageResult != null&&pageResult.getList()!=null&&pageResult.getList().size()>0) {
			for (SantoMgtVO stmMgtVO : pageResult.getList()) {
				if(stmMgtVO.getWeiId()!=null&&stmMgtVO.getAgentId()!=null){
					if(stmMgtVO.getCreateTime()!=null){
						stmMgtVO.setCreateTimes(DateUtils.formatDateTime(stmMgtVO.getCreateTime()));
					}
					if(stmMgtVO.getProvince()!=null&&stmMgtVO.getDistrict()!=null&&stmMgtVO.getProvince()>0&&stmMgtVO.getDistrict()>0){
						stmMgtVO.setShowarea(regionalService.getNameByCode(stmMgtVO.getProvince())+"-"+regionalService.getNameByCode(stmMgtVO.getCity())+"-"+regionalService.getNameByCode(stmMgtVO.getDistrict()));
					}
					if (sMgtDTO.getStatus() != null && sMgtDTO.getStatus() > 0 && stmMgtVO.getAgentId()==null&&stmMgtVO.getAgentId().longValue()<0) {
						stmMgtVO.setOutOrIn(0);
						stmMgtVO.setStatus(0);
					}
					if(!agentId.contains(stmMgtVO.getAgentId())){
						agentId.add(stmMgtVO.getAgentId());
					}
					if(!weiId.contains(stmMgtVO.getWeiId())){
						weiId.add(stmMgtVO.getWeiId());
					}
				}else{
					return null;
				}
			}
		}else{
			return null;
		}
		String hqls = "from DCastellans a where  1=1 ";
		Map<String, Object> params = new HashMap<String, Object>();
		if(agentId!=null){
			hqls+=" and a.agentId in (:agentId)";
			params.put("agentId", agentId);
		}
		if (sMgtDTO.getStatus() != null && sMgtDTO.getStatus() > 0) {
			hqls +=  " and a.porN =:porN";
			params.put("porN", sMgtDTO.getStatus());
		}
		List<DCastellans> dcList = baseDAO.findByMap(hqls.toString(), params);
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("weiId", weiId);
		List<UShopInfo> usInfos = baseDAO.findByMap("from UShopInfo where weiId in(:weiId)", paramMap);
		if (pageResult != null&&pageResult.getList()!=null&&pageResult.getList().size()>0) {
			for (SantoMgtVO stmMgtVO : pageResult.getList()) {	
				if(dcList!=null&&dcList.size()>0){
					for (DCastellans dCastellans : dcList) {
						if(stmMgtVO.getAgentId().longValue()==dCastellans.getAgentId().longValue()){
							if(dCastellans.getPorN()>0&&dCastellans.getPorN()!=null&&dCastellans.getOutOrIn()!=null&&dCastellans.getOutOrIn()>=0){
								stmMgtVO.setOutOrIn(dCastellans.getOutOrIn()==null?-1:dCastellans.getOutOrIn());
								stmMgtVO.setStatus(dCastellans.getPorN()==null?-1:dCastellans.getPorN());
								break;
							}
							if(dCastellans.getPorN()==sMgtDTO.getStatus()&&sMgtDTO.getStatus() != null && sMgtDTO.getStatus() > 0){
								stmMgtVO.setOutOrIn(dCastellans.getOutOrIn()==null?-1:dCastellans.getOutOrIn());
								stmMgtVO.setStatus(dCastellans.getPorN()==null?-1:dCastellans.getPorN());
								break;
							}
						}
					}	
				}else{
					return null;
				}
				if(usInfos!=null&&usInfos.size()>0){
					for (UShopInfo uShopInfo : usInfos) {	
						if(uShopInfo.getShopName()!=null&&""!=uShopInfo.getShopName()&&uShopInfo.getWeiId().longValue()==stmMgtVO.getWeiId().longValue()){
							stmMgtVO.setShopName(uShopInfo.getShopName());
							break;
						}
					}
				}
			}	
		}
		return pageResult;
		
	}

	@Override
	public List<DBrands> findDBrands() {
		List<DBrands> dBrands = baseDAO.find("from DBrands");
		if(dBrands!=null&&dBrands.size()>0){
			return dBrands;
		}
		return null;
	}

	@Override
	public ReturnModel getagentoDTO(String json) {
		// TODO Auto-generated method stub
		ReturnModel returnModel = new ReturnModel();
		try{   
			SantoMgtVO stMgtVO = new SantoMgtVO();
			JSONObject obj;
			obj = JSONObject.fromObject(json);
			stMgtVO.setDistrict(obj.getInt("district"));
			if(stMgtVO.getDistrict()==null&&stMgtVO.getDistrict()<0){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择省市区!");
				return returnModel;
			}
			stMgtVO.setProvince(obj.getInt("province"));
			if(stMgtVO.getProvince()==null&&stMgtVO.getProvince()<0){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择省市区!");
				return returnModel;
			}
			stMgtVO.setCity(obj.getInt("city"));
			if(stMgtVO.getCity()==null&&stMgtVO.getCity()<0){
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请选择省市区!");
				return returnModel;
			}
			//微店号
			stMgtVO.setWeiId(obj.getLong("weiId"));
			//手机号码
			stMgtVO.setPhoneNumber(obj.getString("contactPhone"));
			if(stMgtVO.getPhoneNumber() == null || "".equals(stMgtVO.getPhoneNumber()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入正确的手机号码!");
				return returnModel;
			}
			//qq号码
			stMgtVO.setLandLine(obj.getString("qq"));
			if(stMgtVO.getLandLine() == null || "".equals(stMgtVO.getLandLine()))
			{
				returnModel.setStatu(ReturnStatus.ParamError);
				returnModel.setStatusreson("请输入QQ号码!");
				return returnModel;
			}
			stMgtVO.setBrandId(obj.getInt("brandId"));
			//返回对象
			returnModel.setBasemodle(stMgtVO);
			returnModel.setStatu(ReturnStatus.Success);
			returnModel.setStatusreson("成功!");
		}catch(Exception ex)
		{
			returnModel.setStatu(ReturnStatus.SystemError);
			returnModel.setStatusreson(ex.getMessage());
			return returnModel;
		}
		return returnModel;
	}

	@Override
	public ReturnModel saveAgento(SantoMgtVO vo) {
		ReturnModel returnModel = new ReturnModel();
		UWeiSeller usif = baseDAO.get(UWeiSeller.class, vo.getWeiId());
		if(usif == null)
		{
			returnModel.setStatu(ReturnStatus.DataError);
			returnModel.setStatusreson("该微店用户不存在");
			return returnModel;
		}
		List<DAgentInfo> dList = baseDAO.find("from DAgentInfo where weiId=?"
				+ " and province=? and city=? and district=?", vo.getWeiId(),vo.getProvince(),vo.getCity(),vo.getDistrict());
		DAgentInfo dInfo = new DAgentInfo();
		if(dList==null||dList.size()<1){
			dInfo.setBrandId(vo.getBrandId());
			dInfo.setCity(vo.getCity());
			dInfo.setWeiId(vo.getWeiId());
			dInfo.setContactPhone(vo.getPhoneNumber());
			dInfo.setCreateTime(new Date());
			dInfo.setDistrict(vo.getDistrict());
			dInfo.setProvince(vo.getProvince());
			dInfo.setQq(vo.getLandLine());
			baseDAO.save(dInfo);
		}
		List<DCastellans> dllist = baseDAO.find("from DCastellans where weiId=?"
				+ " and province=? and city=? and district=?", vo.getWeiId(),vo.getProvince(),vo.getCity(),vo.getDistrict());
		if(dllist != null&&dllist.size()>0)
		{
			returnModel.setStatu(ReturnStatus.DataError);
			returnModel.setStatusreson("该地区城主已存在!");
			return returnModel;
		}else{
			DCastellans dll = new DCastellans();
			dll.setAgentId(dInfo.getAgentId());
			dll.setBrandId(vo.getBrandId());
			dll.setCity(vo.getCity());
			dll.setWeiId(vo.getWeiId());
			dll.setPorN(Integer.parseInt(CastellanType.castellan.toString()));
			dll.setOutOrIn(Integer.parseInt(AgentType.in.toString()));
			dll.setContactPhone(vo.getPhoneNumber());
			dll.setCreateTime(new Date());
			dll.setDistrict(vo.getDistrict());
			dll.setProvince(vo.getProvince());
			baseDAO.save(dll);
		}
		if(vo.getWeiId()!=null&&vo.getWeiId().longValue()>0){
			iUUserAssistMgtDAO.addIdentity(vo.getWeiId(), UserIdentityType.AgentDuke);
		}
		returnModel.setStatu(ReturnStatus.Success);
		returnModel.setStatusreson("保存成功!");
		return returnModel;
	}

	@Override
	public List<ProductAuditVO> findProductAudit(Long productId) {
		List<ProductAuditVO> AuditVOsList = new ArrayList<ProductAuditVO>();
		List<PProductStyles> pList = baseDAO.find("from PProductStyles where productId=?", productId);
		if(pList!=null&&pList.size()>0){
			for (PProductStyles pStyles : pList) {
				ProductAuditVO pVo = new ProductAuditVO();
				String pName =iShoppingCartService.getProductStyleName(productId, pStyles.getStylesId());
				pVo.setAttributeName(pName);
				AuditVOsList.add(pVo);
			}
		}
		return AuditVOsList;
		/*List<Long> ids = baseDAO.find("SELECT stylesId from PProductStyles where productId=?", productId);
		Map<String, Object> pMap = new HashMap<String, Object>();
		if(ids!=null&&ids.size()>0){
			pMap.put("ids", ids);
		}
		List<Long> ablist = baseDAO.findByMap("select attributeId from PProductStyleKv where stylesId in (:ids)", pMap);
		Map<String, Object> pMaps = new HashMap<String, Object>();
		if(ablist!=null&&ablist.size()>0){
			pMap.put("attributeId", pMaps);
		}
		String hql = "select a.attributeName as attributeName,b.value as value from PProductSellKey a,PProductSellValue b WHERE a.attributeId=b.attributeId and a.attributeId in(:pMaps)";
		return baseDAO.find(hql.toString(), productId);*/
	}
}
