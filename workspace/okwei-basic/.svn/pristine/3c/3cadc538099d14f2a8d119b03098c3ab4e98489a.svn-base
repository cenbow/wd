package com.okwei.dao.impl.product;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.crypto.dsig.keyinfo.KeyName;

import org.springframework.stereotype.Repository;

import com.okwei.bean.domain.AActProductsShowTime;
import com.okwei.bean.domain.AActivity;
import com.okwei.bean.domain.AActivityProducts;
import com.okwei.bean.domain.PProducts;
import com.okwei.bean.vo.activity.ActProductInfo;
import com.okwei.common.Limit;
import com.okwei.common.PageResult;
import com.okwei.dao.impl.BaseDAO;
import com.okwei.dao.product.IProductSearchDao;
import com.okwei.util.DateUtils;
import com.okwei.util.RedisUtil;
import com.sun.org.apache.bcel.internal.generic.NEW;

@Repository
public class ProductSearchDao extends BaseDAO implements IProductSearchDao{

	//缓存头部
	private String headkeyName="Product_redis_";
	
	public PProducts getPProducts(Long productID){
		String key=headkeyName+"pid_"+productID;
		PProducts products=(PProducts)RedisUtil.getObject(key);
		if(products!=null)
			return products;
		else {
			products=super.get(PProducts.class, productID);
			if(products!=null){
				RedisUtil.setObject(key, products, 60);//1分钟缓存
				return products;
			}
		}
		return null;
	}
	
	public List<AActProductsShowTime> find_AActProductsShowTime(){	
		String keyname = headkeyName+"showList";
		List<AActProductsShowTime> resultlist = (List<AActProductsShowTime>) RedisUtil.getObject(keyname);
		if (resultlist == null || resultlist.size() <= 0) {
			String hqlString = " from AActProductsShowTime a where a.endTime>=:nowtime  and a.beginTime>=:nowtime order by a.sort asc,a.actPid desc ";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("nowtime", new Date());
			resultlist = super.findByMap(hqlString, map);
			if (resultlist != null && resultlist.size() > 0) {
				long num1=resultlist.get(0).getEndTime().getTime();
				long num2=(new Date()).getTime();
				RedisUtil.setObject(keyname, resultlist, (int)(num1-num2));
				return resultlist;
			}
		}
		return null;
	}
	
	public ActProductInfo get_ProductAct(Long productId){
		List<AActProductsShowTime> list=find_AActProductsShowTime();
		if(list!=null&&list.size()>0){
			for (AActProductsShowTime cc : list) {
				if(cc.getProductId().longValue()==productId.longValue()){
					AActivityProducts products=super.get(AActivityProducts.class, cc.getProActId());
					if(products!=null){
						AActivity activity= super.get(AActivity.class, products.getActId());
						ActProductInfo result=new ActProductInfo();
						result.setActiveType(activity.getType());
						result.setProductId(cc.getProductId()); 
						result.setProActId(cc.getProActId());
						result.setBeginTime(cc.getBeginTime());
						result.setEndTime(cc.getEndTime()); 
						return result;
					}
				}	
			}
		}
		return null;
	}
	
}
