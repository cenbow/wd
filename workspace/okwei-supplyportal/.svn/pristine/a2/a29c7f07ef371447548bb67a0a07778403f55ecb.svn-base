package com.okwei.supplyportal.web.filter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.okwei.supplyportal.bean.vo.LoginUser;
import com.okwei.util.ObjectUtils;
import com.okwei.util.RedisUtil;

public class SSOFilter implements Filter
{
    FilterConfig filterConfig = null;

    @Override
    public void destroy()
    {
        this.filterConfig = null;
    }

    @Override
    public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException,ServletException
    {
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        /* 测试用 */
        if(httpRequest != null)
        {
            chain.doFilter(request,response);
            return;
        }
        /*--------用的时候删除上面的------------*/

        // 获取URL
        String domainUrl = httpRequest.getRequestURL().toString();
        // 获取参数tiket
        String tiket = httpRequest.getParameter("tiket");
        // 如果链接的参数tiket不为空
        if(!ObjectUtils.isEmpty(tiket))
        {
            // 设置cookies
            Cookie cookie = new Cookie("tiket",tiket);
            cookie.setMaxAge(3600);
            cookie.setPath("/");
            httpResponse.addCookie(cookie);
            // 截取字符串
            domainUrl = domainUrl.replaceAll("(\\?|&){1,}tiket=.*","");
            // 跳转当前页
            httpResponse.sendRedirect(domainUrl);
            return;
        }
        // 获取cookie里面的tiket
        Cookie[] cookies = httpRequest.getCookies();
        String cookie_tiket = "";
        for(Cookie cookie : cookies)
        {
            if("tiket".equals(cookie.getName().trim()))
            {
                cookie_tiket = cookie.getValue();
            }
        }
        // 如果cookie里面的tiket不为空
        if(!ObjectUtils.isEmpty(cookie_tiket))
        {
            // 获取缓存的用户信息
            LoginUser user = (LoginUser) RedisUtil.GetObjectByTiket(cookie_tiket);
            if(user != null)
            {
                // 添加redis缓存的时间
                chain.doFilter(request,response);
            }
            else
            {
                // 删除cookie里面的tiket
                Cookie cookie = new Cookie("tiket",null);
                cookie.setMaxAge(-1);
                cookie.setPath("/");
                httpResponse.addCookie(cookie);
                // 没有找到用户信息，没有登陆，跳转登录页
                httpResponse.sendRedirect("http://port.okwei.com/login.aspx?back=" + domainUrl);
                return;
            }
        }
        else
        {
            if("notiket".equals(cookie_tiket))
            {
                // 没有登陆，跳转登录页
                httpResponse.sendRedirect("http://port.okwei.com/login.aspx?back=" + domainUrl);
                return;
            }
            // 链接参数与cookie都没有tiket，去单点登陆站点获取
            httpResponse.sendRedirect("http://port.okwei.com/GetTiket.aspx?back=" + domainUrl);
            return;
        }
    }

    @Override
    public void init(FilterConfig arg0) throws ServletException
    {
        this.filterConfig = filterConfig;
    }

}
