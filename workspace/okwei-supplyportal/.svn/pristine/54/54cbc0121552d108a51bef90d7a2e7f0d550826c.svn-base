package com.okwei.supplyportal.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.okwei.bean.domain.PProducts;
import com.okwei.bean.domain.UBatchSupplyer;
import com.okwei.bean.domain.USupplyer;
import com.okwei.bean.domain.UVerifier;
import com.okwei.bean.domain.UYunSupplier;
import com.okwei.service.impl.BaseService;
import com.okwei.supplyportal.bean.enums.ProductStatus;
import com.okwei.supplyportal.bean.vo.ProductManageVO;
import com.okwei.supplyportal.bean.vo.SupplyOrderCount;
import com.okwei.supplyportal.bean.vo.SupplyerMsg;
import com.okwei.supplyportal.bean.vo.SupplyerProductCollect;
import com.okwei.supplyportal.bean.vo.SupplyerProductCount;
import com.okwei.supplyportal.bean.vo.SupplyerProductMsg;
import com.okwei.supplyportal.cons.Constants;
import com.okwei.supplyportal.dao.IProductManageDao;
import com.okwei.supplyportal.service.IProductListService;
import com.okwei.util.DateUtils;
import com.okwei.util.ImgDomain;

@Service
public class ProductListService extends BaseService implements
		IProductListService {

	@Autowired
    private	IProductManageDao productManageDao;
	
	@Override
	public ProductManageVO getManageMsg(Short productstate,int pagesize,int pageindex) {
		// TODO 自动生成的方法存根
		ProductManageVO manageMsg = new ProductManageVO();
		
		Long weiid = 116170L;
		
		if(pagesize<=0)
			pagesize=10;
		if(pageindex<=0)
			pageindex=1;
		
		/**
		 * 获取供应商信息
		 */
		SupplyerMsg supMsg = new SupplyerMsg();
		USupplyer baseSupplyer = productManageDao.getBaseSupplyerMsg(weiid);
		if(baseSupplyer!=null)
		{
 			supMsg.setImage(baseSupplyer.getSupplierLogo());
			supMsg.setWeiname(baseSupplyer.getCompanyName());
		}
		
		UBatchSupplyer supplyer = productManageDao.getSupplyerMsg(weiid);
		if(supplyer!=null)
		{
			supMsg.setImage(supplyer.getShopPic());
			supMsg.setWeiname(supplyer.getShopName());
			supMsg.setBuscontent(supplyer.getBusContent());
			if(supplyer.getStatus()!=null && supplyer.getStatus().equals(4))
				supMsg.setIsbatch(1);
		}
		
		UVerifier verifier = productManageDao.getBaseVerifierMsg(weiid);
		if(verifier!=null)
		{
			supMsg.setIsport(1);
		}
		
		/**
		 * 获取订单个数
		 */
		SupplyOrderCount orderCount = new SupplyOrderCount();
		Long needpay = productManageDao.getOrderCountByState(weiid, (short) 0);
		Long needsend = productManageDao.getOrderCountByState(weiid, (short) 1);
		Long needreseive = productManageDao.getOrderCountByState(weiid, (short) 2);
		orderCount.setNeedpay(Integer.parseInt(needpay.toString()));
		orderCount.setNeedsend(Integer.parseInt(needsend.toString()));
		orderCount.setNeedreseive(Integer.parseInt(needreseive.toString()));
		
		/**
		 * 获取产品个数
		 */
		SupplyerProductCount productCount = new SupplyerProductCount();
		Long saleing = productManageDao.getProductCountyByState(weiid, ProductStatus.Showing.getNo());
		Long saveing = productManageDao.getProductCountyByState(weiid, ProductStatus.Drop.getNo());
		Long verifying = productManageDao.getProductCountyByState(weiid, ProductStatus.Submitting.getNo());
		Long fail = productManageDao.getProductCountyByState(weiid, ProductStatus.Fail.getNo());
		Long drafting = productManageDao.getProductCountyByState(weiid, ProductStatus.OutLine.getNo());
		productCount.setSaleing(Integer.parseInt(saleing.toString()));
		productCount.setSaveing(Integer.parseInt(saveing.toString()));
		productCount.setVerifying(Integer.parseInt(verifying.toString()));
		productCount.setFail(Integer.parseInt(fail.toString()));
		productCount.setDrafting(Integer.parseInt(drafting.toString()));
		
		/**
		 * 获取产品列表信息
		 */
		SupplyerProductCollect productCollect = new SupplyerProductCollect();
		Long totalCount = productManageDao.getProductCountyByState(weiid, productstate);
		productCollect.setPagesize(pagesize);
		productCollect.setPageindex(pageindex);
		Long pagecount = totalCount/pagesize +(totalCount%pagesize==0?0:1);
		productCollect.setPagecount(Integer.parseInt(pagecount.toString()) );
		productCollect.setType(productstate);
		
		List<SupplyerProductMsg> productlist = new ArrayList<SupplyerProductMsg>();
		List<Object[]> objects = productManageDao.getProductsBySupID(weiid, productstate, pagesize+1, pageindex);
		if(objects!=null && objects.size()>0)
		{
			for(int i=0;i<objects.size();i++)
			{
				SupplyerProductMsg pmsg = new SupplyerProductMsg();
				Long productid = Long.parseLong(objects.get(i)[0]==null?"0":objects.get(i)[0].toString());
				Double price = Double.parseDouble(objects.get(i)[1]==null?"0.0":objects.get(i)[1].toString());
				String image = objects.get(i)[2]==null?"":objects.get(i)[2].toString();
				String producttitle = objects.get(i)[3]==null?"":objects.get(i)[3].toString();
				Short sort = Short.parseShort(objects.get(i)[4]==null?"0":objects.get(i)[4].toString());
				String realsetime = DateUtils.formatDateTime(objects.get(i)[5]==null?new Date():(Date) objects.get(i)[5]);
				Integer shelvecount = Integer.parseInt(objects.get(i)[6]==null?"0":objects.get(i)[6].toString());
				Integer evaluatecount = Integer.parseInt(objects.get(i)[7]==null?"0": objects.get(i)[7].toString());
				
				//获取下一个产品的排序号，注意边界溢出
				Short nextsort = sort;
				if(objects.size()==1 || i==objects.size()-1)
					nextsort=-1;
				else if(i<(objects.size()-1))
				{
					nextsort = Short.parseShort(objects.get(i+1)[4]==null?"0":objects.get(i+1)[4].toString());
				}
		        pmsg.setProductid(productid);
		        pmsg.setPrice(price);
		       // pmsg.setProductimage(ImgDomain.GetFullImgUrl(image));
		        pmsg.setProductimage(image);
		        pmsg.setProducttitle(producttitle);
		        pmsg.setRealsetime(realsetime);
		        pmsg.setSharedcount(evaluatecount);
		        pmsg.setShevlecount(shelvecount);
		        
		        /**
		         * 一下两位的赋值是判断前端是否显示已推荐、上移、下移
		         */
		        //标记是否为置顶
		        pmsg.setIstop(0);
		        //上下移都不要为0；只要下移为1；上下移动都要为2；只要上移动为3
		        pmsg.setPosition(-1);
		        //置顶的sort是大于0的
		        if(sort>0)
		        {
		        	pmsg.setIstop(1);
		        	if(i==0 && pageindex==1) //第一页的第一个
		        	{
		        		if(nextsort<=0) //这个判断表达了两个意思：1、只有一个产品；2、只有一个置顶的产品
		        		    pmsg.setPosition(0);//只有一个置顶的产品
		        		else
		        			pmsg.setPosition(1);//如果只有一个就不要上下移动了
		        	}
		        	else
		        	{
		        		//中间的设置为2
		        		pmsg.setPosition(2);
		        		//如果下一个产品没有置顶，说明当前为最后一个，设置为3
		        		if(nextsort<=0) //此次分页只有一个产品，也是这个判断，前面当size为0时已经将nextsort置为-1了
		        			pmsg.setPosition(3);
		        	}
		        	
		        }
		        
		        productlist.add(pmsg);
		        
		        //最有一个就break；注意在查询的时候多查了一个，这里判断最后一个要提前
		        if(objects.size()==(pagesize+1) && i==(pagesize-1))
		        	break;
		        
			}
		}
		productCollect.setProductlist(productlist);
		
		manageMsg.setPtype(productstate);
		manageMsg.setSupmsg(supMsg);
		manageMsg.setOrdercount(orderCount);
		manageMsg.setProductcount(productCount);
		manageMsg.setProductcollect(productCollect);
		return manageMsg;
	}

	@Override
	public int offTop(Long productid,Long supweiid) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.updateProductSort(productid, (short) 0,supweiid);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}

	@Override
	public int onTop(Long productid,Long supweiid) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.updateProductSort(productid,supweiid);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}

	@Override
	public int moveposition(Long productid, Short updown,Long supweiid) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.moveposition(productid,updown,supweiid);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}

	@Override
	public int batchontop(String[] products, Long supweiid) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.batchontop(products,supweiid);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}

	@Override
	public int batchoffshow(String[] products, Long supweiid) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.batchoffshow(products,supweiid);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}

	@Override
	public int batchoperate(String[] products, Long supweiid, Short optype) {
		// TODO 自动生成的方法存根
		try
		{
			productManageDao.batchoperate(products,supweiid,optype);
		}
		catch(Exception e)
		{
			return 0;
		}
		return 1; 
	}
}
