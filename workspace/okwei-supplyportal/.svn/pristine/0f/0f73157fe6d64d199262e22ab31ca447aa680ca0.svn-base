package com.okwei.supplyportal.service.impl;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okwei.okwei.supplyportal.bean.enumExtend.SupplyBookOrderTypeEnum;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.okwei.bean.domain.OBookAssist;
import com.okwei.bean.domain.OOrderAddr;
import com.okwei.bean.domain.OOrderFlow;
import com.okwei.bean.domain.OProductOrder;
import com.okwei.bean.domain.OSupplyerOrder;
import com.okwei.bean.domain.UWeiSeller;
import com.okwei.bean.enums.BookPayTypeEnum;
import com.okwei.bean.enums.OrderStatusEnum;
import com.okwei.bean.enums.OrderTypeEnum;
import com.okwei.bean.enums.TailPayTypeEnum;
import com.okwei.common.Limit;
import com.okwei.common.PageResult;
import com.okwei.service.impl.BaseService;
import com.okwei.supplyportal.bean.vo.MsgResult;
import com.okwei.supplyportal.bean.vo.ParamOrderSearch;
import com.okwei.supplyportal.bean.vo.ProductOrderVO;
import com.okwei.supplyportal.bean.vo.SupplyBookOrderParam;
import com.okwei.supplyportal.bean.vo.SupplyBookOrderStateCountVO;
import com.okwei.supplyportal.bean.vo.SupplyBookOrderVO;
import com.okwei.supplyportal.bean.vo.SupplyOrderCountSumVO;
import com.okwei.supplyportal.bean.vo.SupplyOrderDetailsVO;
import com.okwei.supplyportal.bean.vo.SupplyOrderStateCountVO;
import com.okwei.supplyportal.bean.vo.SupplyOrderVO;
import com.okwei.supplyportal.dao.IOrderManageDAO;
import com.okwei.supplyportal.service.IOrderManageService;
import com.okwei.util.ImgDomain;
import com.okwei.util.ObjectUtils;
import com.okwei.util.ParseHelper;

@Service
public class OrderManageService extends  BaseService implements IOrderManageService {

	@Autowired
	private IOrderManageDAO orderBase;
	
	@Override
	public PageResult<SupplyOrderVO> getOrderListPageResult(ParamOrderSearch param,Long supplyWeiid, Limit limit)
	{
		PageResult<OSupplyerOrder> suplist=orderBase.getSupplyOrderlistResult(param, supplyWeiid, limit);
		if(suplist==null||suplist.getTotalCount()<=0)
			return null;
		PageResult<SupplyOrderVO> result=new  PageResult<SupplyOrderVO>();
		//TODO 供应商订单列表
		String[] supplyOrderIds=new String[suplist.getList().size()];
		Long[] buyerWids=new Long[suplist.getList().size()];
		for(int i=0;i<suplist.getList().size();i++)
		{
			supplyOrderIds[i]=suplist.getList().get(i).getSupplierOrderId();
			buyerWids[i]=suplist.getList().get(i).getBuyerID();
		}
		//订单商品列表
		List<OProductOrder> productlist=orderBase.getProductOrderListBySupplyOrderIds(supplyOrderIds);
		//买家信息
		List<UWeiSeller> userSellers=orderBase.getUsersByWeiids(buyerWids);
		List<SupplyOrderVO> orderlist=new ArrayList<SupplyOrderVO>();
		for (OSupplyerOrder oo : suplist.getList()) {
			SupplyOrderVO ss=new SupplyOrderVO();
			ss.setOrderNo(oo.getSupplierOrderId());
			ss.setBuyerWeiid(oo.getBuyerID());
			ss.setOrderState(oo.getState());
			Map<Short, OrderStatusEnum> mapState = new HashMap<Short, OrderStatusEnum>();
			for (OrderStatusEnum tt : OrderStatusEnum.values()) {
				mapState.put(Short.parseShort(tt.toString()), tt);
			}
			ss.setOrderStateName( getOrderStateName(mapState.get(oo.getState())));
			ss.setTotalPrice(ParseHelper.getDoubleDefValue(oo.getTotalPrice())+ ParseHelper.getDoubleDefValue(oo.getPostage()));
			ss.setPostPrice(oo.getPostage()); 
			ss.setCreateTimeStr(oo.getOrderTime().toString());
			
			for (UWeiSeller user : userSellers) {
				if(oo.getBuyerID()== user.getWeiId())
					ss.setBuyerName(user.getWeiName()); 
			}
			ss.setProList(getSupplyOrderProducts(oo.getSupplierOrderId(), productlist)); 
			orderlist.add(ss);
		}
		result.setList(orderlist); 
		result.setPageIndex(limit.getPageId());
		result.setPageSize(limit.getSize());
		result.setPageCount(suplist.getPageCount());
		result.setTotalCount(suplist.getTotalCount()); 
		return result;
	}
	
	/**
	 * 获取供应商预订单列表
	 * @param param
	 * @param supplyWeiid
	 * @param limit
	 * @return
	 */
	public PageResult<SupplyBookOrderVO> getBookOrderListPageResult(ParamOrderSearch param,Long supplyWeiid, Limit limit)
	{
		PageResult<OSupplyerOrder> suplist= orderBase.getSupplyBookOrderlistResult(param, supplyWeiid, limit);//orderBase.getSupplyOrderlistResult(param, supplyWeiid, limit);
		if(suplist==null||suplist.getTotalCount()<=0)
			return null;
		PageResult<SupplyBookOrderVO> result=new  PageResult<SupplyBookOrderVO>();
		//TODO 供应商订单列表
		String[] supplyOrderIds = new String[suplist.getList().size()];
		Long[] buyerWids = new Long[suplist.getList().size()];
		for (int i = 0; i < suplist.getList().size(); i++) {
			supplyOrderIds[i] = suplist.getList().get(i).getSupplierOrderId();
			buyerWids[i] = suplist.getList().get(i).getBuyerID();
		}
		// 订单商品列表
		List<OProductOrder> productlist = orderBase.getProductOrderListBySupplyOrderIds(supplyOrderIds);
		// 买家信息
		List<UWeiSeller> userSellers = orderBase.getUsersByWeiids(buyerWids);
		//预订单支付列表
//		List<OPayOrder> opayorderlist=null;
		//预订单辅助信息
		List<OBookAssist> assistlist=orderBase.getOBookAssistlistBySupplyOrderIds(supplyOrderIds);
		
		List<SupplyBookOrderVO> orderlist = new ArrayList<SupplyBookOrderVO>();
		for (OSupplyerOrder oo : suplist.getList()) {
			SupplyBookOrderVO ss = new SupplyBookOrderVO();
			ss.setOrderNo(oo.getSupplierOrderId());
			ss.setBuyerWeiid(oo.getBuyerID());
			ss.setOrderState(oo.getState());
			Map<Short, OrderStatusEnum> mapState = new HashMap<Short, OrderStatusEnum>();
			for (OrderStatusEnum tt : OrderStatusEnum.values()) {
				mapState.put(Short.parseShort(tt.toString()), tt);
			}
			ss.setOrderStateName(getOrderStateName(mapState.get(oo.getState())));
			ss.setTotalPrice(ParseHelper.getDoubleDefValue(oo.getTotalPrice())+ ParseHelper.getDoubleDefValue(oo.getPostage()));
			ss.setPostPrice(oo.getPostage());
			ss.setCreateTimeStr(oo.getOrderTime().toString());
			for (UWeiSeller user : userSellers) {
				if (oo.getBuyerID() == user.getWeiId())
					ss.setBuyerName(user.getWeiName());
			}
			ss.setProList(getSupplyOrderProducts(oo.getSupplierOrderId(),productlist));
			//付款金额
			List<String> contentList=new ArrayList<String>();
			boolean ass=true;
			for (OBookAssist opay : assistlist) {
				if(opay.getSupplierOrderId()!=null&&opay.getSupplierOrderId().equals(oo.getSupplierOrderId()))
				{
					if(opay.getBookPayType()!=null&&Short.parseShort(BookPayTypeEnum.Full.toString())==opay.getBookPayType())
					{
						contentList.add("全额支付"+ss.getTotalPrice());
					}
					else if(opay.getBookPayType()!=null){
						contentList.add("定金："+opay.getAmount());
						//发货后付尾款
						if(opay.getTailPayType()!=null&&Short.parseShort(TailPayTypeEnum.afterdelivery.toString())==opay.getTailPayType() )
						{
							contentList.add("发货后支付尾款："+(ParseHelper.getDoubleDefValue(ss.getTotalPrice()) -ParseHelper.getDoubleDefValue(opay.getAmount())));
						}else {
							contentList.add("发货前支付尾款："+(ParseHelper.getDoubleDefValue(ss.getTotalPrice()) -ParseHelper.getDoubleDefValue(opay.getAmount())));
						}
						contentList.add("预计发货时间："+opay.getPreSendTime().toString());
					}
					ass=false;
					ss.setOrderState(getSupplyerBookState(ss.getOrderState(), opay.getTailPayType())); 
					ss.setOrderStateName(getSupplyerBookStateName(ss.getOrderState(), opay.getTailPayType()));
				}
			}
			if(ass)
			{
				ss.setOrderState(Integer.parseInt(SupplyBookOrderTypeEnum.Waitting.toString()) ); 
				ss.setOrderStateName("待确认");
			}
			ss.setPayContent(contentList); 
			orderlist.add(ss);
		}
		result.setList(orderlist);
		result.setPageIndex(limit.getPageId());
		result.setPageSize(limit.getSize());
		result.setPageCount(suplist.getPageCount());
		result.setTotalCount(suplist.getTotalCount());
		return result;
	}
	
	@Override
	public SupplyOrderCountSumVO getSupplyOrderCountSumVO(Long supplyerWeiid)
	{
		SupplyOrderCountSumVO result=new SupplyOrderCountSumVO();
		Integer[] types=new Integer[]{
				Integer.parseInt(OrderTypeEnum.Pt.toString()),
				Integer.parseInt(OrderTypeEnum.BatchOrder.toString()),
				Integer.parseInt(OrderTypeEnum.BookOrder.toString()) 
		};
		List<OSupplyerOrder> orderList= orderBase.getSupplyOrderlist(supplyerWeiid, types);
		if(orderList!=null&&orderList.size()>0)
		{
			int lsCount=0,pfCount=0,ydCount=0;
			for (OSupplyerOrder oo : orderList) {
				if(Short.parseShort(OrderTypeEnum.Pt.toString())==oo.getOrderType())
					lsCount++;
				else if(Short.parseShort(OrderTypeEnum.BatchOrder.toString())==oo.getOrderType()) {
					pfCount++;
				}else if(Short.parseShort(OrderTypeEnum.BookOrder.toString())==oo.getOrderType()){
					ydCount++;
				}
			}
			result.setLingshowCount(lsCount);
			result.setPifaCount(pfCount);
			result.setYudingCount(ydCount);
		}
		return result;
	}
	@Override
	public SupplyOrderStateCountVO getSupplyOrderStateCountVO(Long supplyerWeiid,int itype)
	{
		SupplyOrderStateCountVO result=new SupplyOrderStateCountVO();
		Integer[] types= null;
		switch (itype) {
		case 1:
			types=new Integer[]{Integer.parseInt(OrderTypeEnum.Pt.toString())};
			break;
		case 2:
			types=new Integer[]{Integer.parseInt(OrderTypeEnum.BatchOrder.toString())};
			break;
		default:
			return result;
		}
		List<OSupplyerOrder> orderList= orderBase.getSupplyOrderlist(supplyerWeiid, types);
		if(orderList!=null&&orderList.size()>0)
		{
			int nopayCount=0,noFahuoCount=0,yiFahuo=0,completedCount=0;
			for (OSupplyerOrder oo : orderList) {
				if(Short.parseShort(OrderStatusEnum.Nopay.toString())==oo.getState())
					nopayCount++;
				else if(Short.parseShort(OrderStatusEnum.Payed.toString())==oo.getState()) {
					noFahuoCount++;
				}
				else if(Short.parseShort(OrderStatusEnum.Deliveried.toString())==oo.getState()) {
					yiFahuo++;
				}else if(Short.parseShort(OrderStatusEnum.Completed.toString())==oo.getState()){
					completedCount++;
				}
			}
			result.setNoFaHuoCount(noFahuoCount);
			result.setNoPayCount(nopayCount);
			result.setNoShouHuoCount(yiFahuo);
			result.setCompletedCount(completedCount); 
		}
		return result;
	}
	
	@Override
	public SupplyBookOrderStateCountVO getSupplyBookOrderStateCountVO(Long supplyerWeiid)
	{
		SupplyBookOrderStateCountVO result=new SupplyBookOrderStateCountVO();
		Integer[] types=new Integer[]{
				Integer.parseInt(OrderTypeEnum.Pt.toString()),
				Integer.parseInt(OrderTypeEnum.BatchOrder.toString())
		};
		List<OSupplyerOrder> orderList= orderBase.getSupplyOrderlist(supplyerWeiid, types);
		if(orderList==null||orderList.size()<=0)
			return result;
		String[] supplyorderids=new String[orderList.size()];
		for(int i=0;i<orderList.size();i++)
		{
			supplyorderids[i]=orderList.get(i).getSupplierOrderId();
		}
		List<OBookAssist> assistslist=orderBase.getOBookAssistlistBySupplyOrderIds(supplyorderids);
		if(orderList!=null&&orderList.size()>0)
		{
			int waitCount=0,noFahuoCount=0,completedCount=0,nopayTailCount=0,suredCount=0;
			for (OSupplyerOrder oo : orderList) {
				if(Short.parseShort(OrderStatusEnum.WaitSure.toString())==oo.getState())
					waitCount++;
				else if(Short.parseShort(OrderStatusEnum.Sured.toString())==oo.getState()) {
					suredCount++;
				}
				else if(Short.parseShort(OrderStatusEnum.PayedDeposit.toString())==oo.getState()) {
					nopayTailCount++;
					// 如果 发货后付尾款 noFahuoCount++
					if(assistslist!=null&&assistslist.size()>0)
					{
						for (OBookAssist bb : assistslist) {
							if(bb.getSupplierOrderId().equals(oo.getSupplierOrderId()))
							{
								if(Short.parseShort( TailPayTypeEnum.afterdelivery.toString())== bb.getTailPayType())
									noFahuoCount++;
							}
						}
					}
					
				}else if(Short.parseShort(OrderStatusEnum.Completed.toString())==oo.getState()){
					completedCount++;
				}else if(Short.parseShort(OrderStatusEnum.Payed.toString())==oo.getState()){
					noFahuoCount++;
				}
			}
			result.setCompletedCount(completedCount);
			result.setNoFaHuoCount(noFahuoCount);
			result.setNoPayTailCount(nopayTailCount);
			result.setSuredCount(suredCount);
			result.setWaitCount(waitCount);
		}
		return result;
	}
	
	@Override
	public SupplyOrderDetailsVO getOrderDetails(String supplyOrderid)
	{
		SupplyOrderDetailsVO result=new SupplyOrderDetailsVO();
		try {
//			String hqlString=" from OSupplyerOrder o where o.supplierOrderId=?";
//			Object[] bb=new Object[1];
//			bb[0]=supplyOrderid;
			OSupplyerOrder order=orderBase.getEntity(OSupplyerOrder.class, supplyOrderid);//(hqlString, bb);
			if(order!=null)
			{
				String[] supplyidStrings=new String[]{order.getSupplierOrderId()};
				List<OProductOrder> prolist= orderBase.getProductOrderListBySupplyOrderIds(supplyidStrings);
				if(prolist!=null&&prolist.size()>0)
				{
					result.setProList(getSupplyOrderProducts(order.getSupplierOrderId(), prolist)); 
				}
				OOrderAddr addrInfo=orderBase.getEntity(OOrderAddr.class, order.getAddrId());
				result.setOrderNo(order.getPayOrderId());
				result.setOrderTimeStr(order.getOrderTime().toString());
				if(addrInfo!=null)
				{
					result.setReciverName(addrInfo.getReceiverName()); 
					result.setReciverAddress(addrInfo.getDetailAddr());
					result.setReciverPhoneNumber(addrInfo.getMobilePhone()); 
				}
				List<OOrderFlow> flows= orderBase.getOrderFlows(order.getSupplierOrderId());
				result.setOrderFlows(flows); 
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return result;
	}
	/**
	 * 产品列表清单
	 * 根据 供应商订单id 产品列表
	 * @param supplyOrderId
	 * @param prolist
	 * @return
	 */
	private List<ProductOrderVO> getSupplyOrderProducts(String supplyOrderId,List<OProductOrder> prolist)
	{
		if(ObjectUtils.isNotEmpty(prolist)&&!ObjectUtils.isEmpty(supplyOrderId))
		{
			
			List<ProductOrderVO> supProductList=new ArrayList<ProductOrderVO>();
			for (OProductOrder pp : prolist) {
				if(supplyOrderId.equals(pp.getSupplierOrderId()))
				{
					ProductOrderVO pro=new ProductOrderVO();
					pro.setProductId(pp.getProductId());
					pro.setProductTitle(pp.getProdcutTitle());
					pro.setProductState(pp.getState());
					pro.setCount(pp.getCount());
					pro.setPrice(pp.getPrice());
					pro.setCommission(pp.getCommision());
					pro.setSumPrice(pp.getCount()*pp.getPrice());
					pro.setProductImg(ImgDomain.GetFullImgUrl(pp.getProductImg(),24)); 
					pro.setProperty(pp.getProductDes()); 
					supProductList.add(pro);
				}
			}
			return supProductList;
		}
		return null;
	}
	
	@Override
	public MsgResult insertBookOrder(SupplyBookOrderParam param)
	{
		MsgResult result=new MsgResult();
		if(param==null||param.getWeiid()<=0||ObjectUtils.isEmpty(param.getSupplyOrderid()) )
		{
			result.setState(-1);
			result.setMsg("参数有误");
			return result;
		}	
		//TODO 预定单未完成
		if(param.isSured())//确认 预订单
		{
			OSupplyerOrder supplyerOrder=orderBase.getEntity(OSupplyerOrder.class, param.getSupplyOrderid());
			if(supplyerOrder==null||supplyerOrder.getSupplyerId().longValue()!=param.getWeiid())
			{
				result.setState(-1);
				result.setMsg("非法操作");
				return result;
			}
			//需要支付的总价
			double paytotalprice=0;
			// 1 .修改订单价格方式
			switch (param.getEditPriceType()) {
			case 1://修改产品单价
				if(param.getProducts()!=null&&param.getProducts().size()>0)
				{
					double totalprice=0;
					String[] supplyOrderIds=new String[]{param.getSupplyOrderid()};
					//供应商订单包含的产品列表
					List<OProductOrder> proList= orderBase.getProductOrderListBySupplyOrderIds(supplyOrderIds);
					if(proList!=null&&proList.size()>0)
					{
						for (OProductOrder pp : param.getProducts()) {
							 if(!ObjectUtils.isEmpty(pp.getProductOrderId())&&pp.getPrice()!=null)
							 {
								 for (OProductOrder pl : proList) {
									if(pl.getProductOrderId().equals(pp.getProductOrderId()))
									{
										pl.setPrice(pp.getPrice()); 
										super.update(pl);
									}
									paytotalprice+=(pl.getPrice().doubleValue()+pl.getCommision().doubleValue())*pl.getCount().intValue();
									totalprice+=pl.getPrice().doubleValue()*pl.getClassId().intValue();
								 }
							 }
						}
						supplyerOrder.setPostage(param.getEditPostPrice());
						supplyerOrder.setTotalPrice(totalprice); 
						super.update(supplyerOrder);
						totalprice+=param.getEditPostPrice();
					}
				}
				break;
			case 2://修改订单总价
				if(param.getEditTotalPrice()>0)
				{
					supplyerOrder.setTotalPrice(param.getEditTotalPrice());
					supplyerOrder.setPostage(0d); 
					paytotalprice=param.getEditTotalPrice();
					super.update(supplyerOrder);
				}else {
					result.setState(-1);
					result.setMsg("总价不能为0"); 
				}
				break;
			default://不修改价格，不操作
				break;
			}
			OBookAssist ass=new OBookAssist();
			ass.setSupplierOrderId(param.getSupplyOrderid());
			ass.setPreSendTime(param.getPreDeliverTime()); //预计发货时间
			// 2. 首款 付款方式
			switch (param.getPayType()) {
				case 1://百分比
					ass.setBookPayType(Short.parseShort(BookPayTypeEnum.percent.toString()));
					ass.setPersent(Short.parseShort(String.valueOf(param.getFirstPercent()))); 
					ass.setAmount(paytotalprice*param.getFirstPercent()*0.01); 
					break;
				case 2://指定金额
					ass.setBookPayType(Short.parseShort(BookPayTypeEnum.specifyamount.toString()));
					ass.setAmount(param.getFirstPrice()); 
					break;
				default://全款
					ass.setBookPayType(Short.parseShort(BookPayTypeEnum.Full.toString()) );
					ass.setAmount(paytotalprice); 
					break;
			}
			if(param.getPayType()>0)
			{
				//3.尾款付款方式
				TailPayTypeEnum tailPayTypeEnum= param.getTailPayType();
				ass.setTailPayType(Short.parseShort(tailPayTypeEnum.toString()));  
			}	
			ass.setState((short)1);
			ass.setRemark(param.getMessage()); 
			//TODO 生成 支付单 并插入
			
			super.add(ass);
			result.setState(1);
			result.setMsg("确定成功！");
			
		}else //拒绝 
		{
			if(orderBase.UP_supplyOrder(param.getWeiid(), param.getSupplyOrderid(), OrderStatusEnum.Rejected))
			{
				result.setState(1);
				result.setMsg("成功拒绝此预订单！"); 
			}else {
				result.setState(-1);
				result.setMsg("拒绝失败！"); 
			}
		}
		return result;
	}
	
	/**
	 * 获取订单状态名称
	 * @param state
	 * @return
	 */
	public String getOrderStateName(OrderStatusEnum state)
	{
		String name="";
		switch (state) {
		case Nopay:
			name="未支付";
			break;
		case Payed:
			name="已付款";
			break;
		case Deliveried:
			name="已发货";
			break;
		case Accepted:
			name="已收货";
			break;
		case Completed:
			name="交易完成";
			break;
		case Canceled:
			name="已取消";
			break;
		case Tovoided:
			name="已过期";
			break;
		default:
			break;
		}
		return name;
	}
	
	/**
	 * 预定单状态
	 * @param orderState
	 * @param tailPayType
	 * @return
	 */
	public int getSupplyerBookState(int orderState,Short tailPayType)
	{
		OrderStatusEnum state=null;
		for (OrderStatusEnum ee : OrderStatusEnum.values()) {
			if(orderState==Integer.parseInt(ee.toString()))
				state=ee;
		}
		switch (state) {
		case WaitSure:
			return Short.parseShort(SupplyBookOrderTypeEnum.Waitting.toString());
		case Sured:
			return Short.parseShort(SupplyBookOrderTypeEnum.Sured.toString());
		case Completed:
			return Short.parseShort(SupplyBookOrderTypeEnum.Complete.toString());
		case PayedDeposit:
			if(tailPayType==1)
				return Short.parseShort(SupplyBookOrderTypeEnum.DaiFahuo.toString());
			return Short.parseShort(SupplyBookOrderTypeEnum.NopayTail.toString());
		case Payed:
			return Short.parseShort(SupplyBookOrderTypeEnum.DaiFahuo.toString());
		default:
			return orderState;
		}
	}
	/**
	 * 预定单状态
	 * @param orderState
	 * @param tailPayType
	 * @return
	 */
	public String getSupplyerBookStateName(int orderState,Short tailPayType)
	{
		OrderStatusEnum state=null;
		for (OrderStatusEnum ee : OrderStatusEnum.values()) {
			if(orderState==Integer.parseInt(ee.toString()))
				state=ee;
		}
		switch (state) {
		case WaitSure:
			return "待确认";//Short.parseShort(SupplyBookOrderTypeEnum.Waitting.toString());
		case Sured:
			return "已确认";//Short.parseShort(SupplyBookOrderTypeEnum.Sured.toString());
		case Completed:
			return "已完成";//Short.parseShort(SupplyBookOrderTypeEnum.Complete.toString());
		case PayedDeposit:
			if(tailPayType==1)
				return "待发货";//Short.parseShort(SupplyBookOrderTypeEnum.DaiFahuo.toString());
			return "待付尾款";//Short.parseShort(SupplyBookOrderTypeEnum.NopayTail.toString());
		case Payed:
			return "待发货";//Short.parseShort(SupplyBookOrderTypeEnum.DaiFahuo.toString());
		case Tovoided:
			return "已过期";
		default:
			return "";//orderState;
		}
	}
	
}
