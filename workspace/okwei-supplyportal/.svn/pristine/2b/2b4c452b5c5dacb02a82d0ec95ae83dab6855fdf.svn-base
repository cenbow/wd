package com.okwei.supplyportal.dao.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.okwei.bean.domain.PParamKey;
import com.okwei.bean.domain.PParamModel;
import com.okwei.bean.domain.PParamValues;

import org.springframework.stereotype.Repository;

import com.okwei.bean.domain.PPostAgeModel;
import com.okwei.bean.domain.PPreOrder;
import com.okwei.bean.domain.PProductBatchPrice;
import com.okwei.bean.domain.PProductClass;
import com.okwei.bean.domain.PProductImg;
import com.okwei.bean.domain.PProductKeyWords;
import com.okwei.bean.domain.PProductParamKv;
import com.okwei.bean.domain.PProductSellKey;
import com.okwei.bean.domain.PProductSellValue;
import com.okwei.bean.domain.PProductStyleKv;
import com.okwei.bean.domain.PProductStyles;
import com.okwei.bean.domain.PProducts;
import com.okwei.bean.domain.PShopClass;
import com.okwei.bean.domain.UBatchSupplyer;
import com.okwei.bean.domain.UYunSupplier;
import com.okwei.dao.impl.BaseDAO;
import com.okwei.supplyportal.dao.IEditProductInfoDAO;

@Repository
public class EditProductInfoDAO extends BaseDAO implements IEditProductInfoDAO {

	@Override
	public long getTodayCreateProduct(long supplyID) {
		if(supplyID<1)
		{
			return 0;
		}
		//今天 0点0分0秒
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		calendar.set(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), 
				calendar.get(Calendar.DATE), 0, 0, 0);
		
		String hql = "SELECT COUNT(1) from PProducts p where p.supplierWeiId = :supplierWeiId "
				+ "and p.createTime>=:createDate;";
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("supplierWeiId", supplyID);
		params.put("createDate", calendar.getTime());
		
		return super.countByMap(hql, params);
	}

	@Override
	public UYunSupplier getYunSupplier(long supplyID) {
		if(supplyID<1)
		{
			return null;
		}
		
		return super.get(UYunSupplier.class, supplyID);
	}

	@Override
	public UBatchSupplyer getBatchSupplyer(long supplyID) {
		if(supplyID<1)
		{
			return null;
		}

		return super.get(UBatchSupplyer.class, supplyID);
	}

	@Override
	public PProducts getProduct(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		return super.get(PProducts.class, productID);
	}

	@Override
	public List<PProductKeyWords> getKeyWordList(long productID) {
		if(productID<1)
		{
			return null;
		}
		String hql = "from PProductKeyWords p where p.productId =?";
		return super.find(hql,productID);
	}

	@Override
	public List<PProductParamKv> getParamList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductParamKv p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public List<PProductImg> getImgList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductImg p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public List<PProductSellKey> getSellKeyList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductSellKey p where p.productId =?";		
		return super.find(hql, productID);
	}

	@Override
	public List<PProductSellValue> getSellValueList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductSellValue p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public List<PProductStyles> getStyleList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductStyles p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public List<PProductStyleKv> getStyleKvList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductStyleKv p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public PPreOrder getPreOrder(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		return super.get(PPreOrder.class, productID);
	}

	@Override
	public List<PProductBatchPrice> getBatchPriceList(long productID) {
		if(productID<1)
		{
			return null;
		}
		
		String hql = "from PProductBatchPrice p where p.productId =?";
		
		return super.find(hql, productID);
	}

	@Override
	public List<PPostAgeModel> getPostAgeModelList(long supplyID) {
		if(supplyID<1)
		{
			return null;
		}
		
		String hql = "from PPostAgeModel p where p.supplierWeiId =0 or p.supplierWeiId=?";
		
		return super.find(hql,supplyID);
	}

	@Override
	public List<PShopClass> getShopClasseList(long supplyID) {
		if(supplyID<1)
		{
			return null;
		}
		
		String hql = "from PShopClass p where p.weiid =?";
		
		return super.find(hql, supplyID);
	}
	
	@Override
	public long getIsHaveShopName(long supplyID, String sName) {
		if(supplyID<1 || sName==null || sName==""){
			return 0;
		}
		
		String hql="select count(*) from PShopClass p where p.weiid =:supplyID and p.sname=:sName"; 
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("supplyID", supplyID);
		params.put("sName", sName);
		return super.countByMap(hql, params);
	}

	@Override
	public PProductClass getProductClass(int classID) {
		if(classID<1)
		{
			return null;
		}
		
		return super.get(PProductClass.class, classID);
	}

	@Override
	public PParamModel getParamModel(int mID) {
		if(mID<1)
		{
			return null;
		}
		
		return super.get(PParamModel.class, mID);
	}

	@Override
	public List<PParamKey> getParamKeyList(int mID) {
		if(mID<1)
		{
			return null;
		}
		String hql ="from PParamKey p where p.mid =? order by p.sort";
		
		return super.find(hql, mID);
	}

	@Override
	public List<PParamValues> getParamValueList(Integer[] keys) {
		if(keys ==null || keys.length<1)
		{
			return null;
		}
		String hql="from PParamValues p where p.attributeId in(:attributeId)";
		Map<String, Object> Params = new HashMap<String, Object>();
		Params.put("attributeId", keys);
		
		return super.findByMap(hql, Params);
	}

	@Override
	public long saveShopClass(PShopClass psClass) {
		if(psClass ==null || psClass.getWeiid() < 1){
			return 0;
		}
		
		return (long) super.save(psClass);
	}

	@Override
	public int saveParamModel(PParamModel paramModel) {
		if(paramModel ==null || paramModel.getClassId()<1){
			return 0;
		}
		
		return (int) super.save(paramModel);
	}

	@Override
	public int saveParamKey(PParamKey keyModel) {
		if(keyModel ==null || keyModel.getMid()<1){
			return 0;
		}
		
		return (int) super.save(keyModel);
	}

	@Override
	public int saveParamValue(PParamValues valueModel) {
		if(valueModel == null || valueModel.getAttributeId() <1){
			return 0;
		}
		
		return (int) super.save(valueModel);
	}

	@Override
	public long getIsHavePMName(long supplyID, String pmName) {
		if(supplyID<1 || pmName ==null || pmName ==""){
			return 0;
		}
		
		String hql="select count(*) from PParamModel p where p.supplierWeiId =:supplierWeiId and p.mname=:mname"; 
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("supplierWeiId", supplyID);
		params.put("mname", pmName);
		return super.countByMap(hql, params);
	}

	@Override
	public PParamKey getParamKeyModel(Integer keyID) {
		if(keyID ==null ||  keyID < 1){
			return null;
		}
		return super.get(PParamKey.class, keyID);
	}

	@Override
	public PParamValues getParamValueModel(Integer valueID) {
		if(valueID ==null ||  valueID < 1){
			return null;
		}
		
		return super.get(PParamValues.class, valueID);
	}


}
