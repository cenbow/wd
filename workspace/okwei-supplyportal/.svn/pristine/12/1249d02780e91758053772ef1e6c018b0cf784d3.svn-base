package com.okwei.supplyportal.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.okwei.bean.domain.PParamModel;
import com.okwei.bean.domain.PProductClass;
import com.okwei.bean.enums.CatagoryStepEnum;
import com.okwei.service.impl.BaseService;
import com.okwei.supplyportal.bean.vo.CatagoryVO;
import com.okwei.supplyportal.dao.IProductPublishDAO;
import com.okwei.supplyportal.service.IProductPublishService;

@Service
public class ProductPublishService extends BaseService implements IProductPublishService {

	@Autowired
	private IProductPublishDAO productPublishDAO;

	@Override
	public List<PProductClass> getCatagoryByStep(CatagoryStepEnum step) {
		return productPublishDAO.getCatagoryByStep(step);
	}

	@Override
	public List<PProductClass> getCatagoryByParentId(Integer parentId) {
		return productPublishDAO.getCatagoryByParentId(parentId);
	}

	@Override
	public List<Map<String, String>> getCatagoryByKeyword(String keyword) {
		List<Map<String, String>> result = null;
		List<PProductClass> list = productPublishDAO.getCatagoryByKeyword(keyword);
		if (null != list && list.size() > 0) {
			result = new ArrayList<Map<String, String>>();
			for (PProductClass pp : list) {
				Map<String, String> map = new HashMap<String, String>();
				PProductClass parent = productPublishDAO.load(PProductClass.class, pp.getParentId());
				PProductClass ancestry = productPublishDAO.load(PProductClass.class, parent.getParentId());
				StringBuilder sb = new StringBuilder(ancestry.getClassName() + ">>" + parent.getClassName() + ">>" + pp.getClassName());
				map.put("catagoryId", pp.getClassId().toString());
				map.put("path", sb.toString());
				result.add(map);
			}
		}
		return result;
	}

	@Override
	public CatagoryVO getCatagoryByClassId(Integer classId) {
		CatagoryVO vo = new CatagoryVO();
		PProductClass pp = productPublishDAO.load(PProductClass.class, classId);
		List<PProductClass> level3 = productPublishDAO.getCatagoryByParentId(pp.getParentId());
		PProductClass pp2 = productPublishDAO.load(PProductClass.class, pp.getParentId());
		List<PProductClass> level2 = productPublishDAO.getCatagoryByParentId(pp2.getParentId());
		PProductClass pp3 = productPublishDAO.load(PProductClass.class, pp2.getParentId());
		List<PProductClass> level1 = productPublishDAO.getCatagoryByParentId(pp3.getParentId());
		List<PParamModel> templates = productPublishDAO.getTemplateByClassId(classId);
		vo.setLevel3Id(classId);
		vo.setLevel2Id(pp.getParentId());
		vo.setLevel1Id(pp2.getParentId());
		vo.setLevel3(level3);
		vo.setLevel2(level2);
		vo.setLevel1(level1);
		vo.setTemplates(templates);
		return vo;
	}

	@Override
	public List<PParamModel> getTemplateByClassId(Integer id) {
		return productPublishDAO.getTemplateByClassId(id);
	}

}
