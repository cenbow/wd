package com.okwei.supplyportal.dao.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import okwei.okwei.supplyportal.bean.enumExtend.SupplyBookOrderTypeEnum;

import org.springframework.stereotype.Repository;

import com.okwei.bean.domain.OBookAssist;
import com.okwei.bean.domain.OOrderFlow;
import com.okwei.bean.domain.OPayOrder;
import com.okwei.bean.domain.OProductOrder;
import com.okwei.bean.domain.OSupplyerOrder;
import com.okwei.bean.domain.UWeiSeller;
import com.okwei.bean.enums.OrderStatusEnum;
import com.okwei.bean.enums.OrderTypeEnum;
import com.okwei.common.Limit;
import com.okwei.common.PageResult;
import com.okwei.dao.impl.BaseDAO;
import com.okwei.supplyportal.bean.vo.ParamOrderSearch;
import com.okwei.supplyportal.dao.IOrderManageDAO;
import com.okwei.util.ObjectUtils;

@Repository
public class OrderManageDAO extends BaseDAO implements IOrderManageDAO {
	
	@Override
	public PageResult<OSupplyerOrder> getSupplyOrderlistResult(ParamOrderSearch param, Long supperWeiid, Limit limit)
	{
		Map<String, Object> map=new HashMap<String, Object>();
		String hql=" from OSupplyerOrder o where o.supplierOrderId>0 ";
		if(supperWeiid>0)
		{
			hql+=" and o.supplyerId=:supweiid";
			map.put("supweiid", supperWeiid);
		}
		if(param!=null)
		{
			//订单类型
			if(param.getOrderType()!=null)
			{
				hql+=" and o.orderType in(:ordertype)";
				Integer[] orderTypes=null;
				switch (param.getOrderType()) {
				case 1://零售订单
					orderTypes=new Integer[]{
							Integer.parseInt(OrderTypeEnum.Pt.toString()),
							Integer.parseInt(OrderTypeEnum.BatchOrder.toString()),
					};
					break;
				case 2://批发订单
					orderTypes=new Integer[]{
							Integer.parseInt(OrderTypeEnum.BatchWholesale.toString()),
						};
						break;
				case 3://预定订单
					orderTypes=new Integer[]{
							Integer.parseInt(OrderTypeEnum.BookOrder.toString()),
						};
					break;
				default:
					orderTypes=new Integer[]{
							Integer.parseInt(OrderTypeEnum.Pt.toString()),
							Integer.parseInt(OrderTypeEnum.BatchOrder.toString()),
						};
					break;
				}
				map.put("ordertype", orderTypes);
			}
			//订单状态
			if(null!=param.getState())
			{
				hql+=" and o.state=:state";
				map.put("state", param.getState());
			}else{
				hql+=" and o.state!=14";
			}
			if(null!=param.getBeginTime())
			{
				hql+=" and o.orderTime>:beginTime ";
				map.put("beginTime", param.getBeginTime());
			}
			if(null!=param.getEndTime())
			{
				hql+=" and o.orderTime<=:endtime ";
				map.put("endtime", param.getEndTime());
			}
			if(null!=param.getMinPrice()&&param.getMinPrice()>0)
			{
				hql+=" and o.totalPrice>=:minprice ";
				map.put("minprice", param.getMinPrice());
			}
			if(null!=param.getMaxPrice()&&param.getMaxPrice()>0)
			{
				hql+=" and o.totalPrice<=:maxprice ";
				map.put("maxprice", param.getMaxPrice());
			}
			//订单号
			if(param.getOrderNo()!=null&&!"".equals(param.getOrderNo()))
			{
				hql+=" and o.supplierOrderId=:supplierOrderId";
				map.put("supplierOrderId", param.getOrderNo());
			}
			//买家微店号
			if(param.getBuyerid()!=null&&param.getBuyerid()>0)
			{
				hql+=" and o.buyerID=:buyerID";
				map.put("buyerID", param.getBuyerid());
			}
			hql+=" order by o.orderTime desc ";
		}
		//TODO map查询方式
		PageResult<OSupplyerOrder> result=super.findPageResultByMap(hql, limit, map);
		return result;
	}
	
	
	
	public PageResult<OSupplyerOrder> getSupplyBookOrderlistResult(ParamOrderSearch param, Long supperWeiid, Limit limit)
	{
		if(param!=null&&param.getState()!=null)
		{
			SupplyBookOrderTypeEnum stateEnum=null;
			for (SupplyBookOrderTypeEnum ee : SupplyBookOrderTypeEnum.values()) {
				 if(Integer.parseInt(ee.toString())==param.getState().shortValue())
					 stateEnum=ee;
			}
			switch (stateEnum) {
			case Waitting://待确认
				param.setState(Short.parseShort(OrderStatusEnum.WaitSure.toString()));
				return getSupplyOrderlistResult(param, supperWeiid, limit);
			case Sured://已确认
				param.setState(Short.parseShort(OrderStatusEnum.Sured.toString()));
				return getSupplyOrderlistResult(param, supperWeiid, limit);
			case NopayTail://未付尾款
				param.setState(Short.parseShort(OrderStatusEnum.PayedDeposit.toString()));
				return getSupplyOrderlistResult(param, supperWeiid, limit);
			case Complete://交易完成
				param.setState(Short.parseShort(OrderStatusEnum.Completed.toString()));
				return getSupplyOrderlistResult(param, supperWeiid, limit);
			case DaiFahuo://待发货
				String sql=" select s from OSupplyerOrder s left join OBookAssist b on s.supplierOrderId=b.supplierOrderId where s.supplyerId=? and ((s.state=12 and b.tailPayType=1) or s.state=1 ) and s.orderType=12 ";
				List<Object> paramList=new ArrayList<Object>();
				paramList.add(supperWeiid);
				if(param.getOrderNo()!=null&&!"".equals(param.getOrderNo()))
				{
					sql+=" and s.supplierOrderId=? ";
					paramList.add(param.getOrderNo());
				}
				if(param.getBuyerid()!=null&&param.getBuyerid()>0)
				{
					sql+=" and s.buyerID=? ";
					paramList.add(param.getBuyerid());
				}
				if(null!=param.getBeginTime())
				{
					sql+=" and o.orderTime>? ";
					paramList.add(param.getBeginTime());
				}
				if(null!=param.getEndTime())
				{
					sql+=" and o.orderTime<=? ";
					paramList.add(param.getEndTime());
				}
				if(null!=param.getMinPrice()&&param.getMinPrice()>0)
				{
					sql+=" and o.totalPrice>=? ";
					paramList.add(param.getMinPrice());
				}
				if(null!=param.getMaxPrice()&&param.getMaxPrice()>0)
				{
					sql+=" and o.totalPrice<=? ";
					paramList.add(param.getMaxPrice());
				}
				sql+=" order by s.orderTime desc";
				Object[] bb=new Object[paramList.size()];
				for(int i=0;i<bb.length;i++)
				{
					bb[i]=paramList.get(i);
				}
				PageResult<OSupplyerOrder> result=super.queryPageResultBySql(sql, limit, bb);
				return result;
			default:
				break;
			}
		}else {
			if(param==null)
				param=new ParamOrderSearch();
			param.setOrderType(3);
			return getSupplyOrderlistResult(param, supperWeiid, limit);
		}
		return null;
	}
	
	@Override
	public List<OPayOrder> getOPayOrderlistBySupplyOrderIds(String[] supplyOrderIds)
	{
		if(!ObjectUtils.isEmpty(supplyOrderIds))
		{
			String hql=" from OPayOrder o where o.supplierOrder in(:sids)";
			Map<String, Object> map=new HashMap<String, Object>();
			map.put("sids", supplyOrderIds);
			//TODO map查询方式 需要更改
			return super.findByMap(hql, map);
		}
		return null;
	}
	
	@Override
	public List<OBookAssist> getOBookAssistlistBySupplyOrderIds(String[] supplyOrderIds)
	{
		if(!ObjectUtils.isEmpty(supplyOrderIds))
		{
			String hql=" from OBookAssist o where o.supplierOrderId in(:sids)";
			Map<String, Object> map=new HashMap<String, Object>();
			map.put("sids", supplyOrderIds);
			//TODO map查询方式 需要更改
			return super.findByMap(hql, map);
		}
		return null;
	}
	
	@Override
	public List<OProductOrder> getProductOrderListBySupplyOrderIds(String[] supplyOrderIds)
	{
		if(!ObjectUtils.isEmpty(supplyOrderIds))
		{
			String hql=" from OProductOrder o where o.supplierOrderId in(:sids)";
			Map<String, Object> map=new HashMap<String, Object>();
			map.put("sids", supplyOrderIds);
			//TODO map查询方式 需要更改
			return super.findByMap(hql, map);
		}
		return null;
	}
	
	public List<UWeiSeller> getUsersByWeiids(Long[] weiids)
	{
		if(!ObjectUtils.isEmpty(weiids))
		{
			String hql=" from UWeiSeller o where o.weiId in(:sids)";
			Map<String, Object> map=new HashMap<String, Object>();
			map.put("sids", weiids);
			//TODO map查询方式 需要更改
			return super.findByMap(hql, map);
		}
		return null;
	}
	
	@Override
	public List<OSupplyerOrder> getSupplyOrderlist(Long weiid,Integer[] typeStates)
	{
		if(weiid>0&&!ObjectUtils.isEmpty(typeStates))
		{
			String hqlString=" from OSupplyerOrder o where o.supplyerId=:weiid and o.orderType in(:typeStates) and o.sellerDel!=1 ";
			Map<String, Object> map=new HashMap<String, Object>();
			map.put("weiid", weiid);
			map.put("typeStates", typeStates);
			return findByMap(hqlString, map);
		}
		return null;
	}
	
	@Override
	public List<OOrderFlow> getOrderFlows(String supplyOrderId)
	{
		if(!ObjectUtils.isEmpty(supplyOrderId))
		{
			String hqlString=" from OOrderFlow f where f.supplierOrderId=? order by f.operateTime desc";
			Object[] bb=new Object[1];
			bb[0]=supplyOrderId;
			List<OOrderFlow> list= find(hqlString, bb);
			return list;
		}
		return null;
	}
	@Override
	public <T> T getEntity(Class<T> objClass, Serializable id) {
		return get(objClass, id);
	}
	
}
