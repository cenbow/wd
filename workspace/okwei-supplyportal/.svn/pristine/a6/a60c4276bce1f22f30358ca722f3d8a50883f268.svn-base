package com.okwei.supplyportal.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.okwei.bean.domain.OPayOrder;
import com.okwei.bean.domain.OProductOrder;
import com.okwei.bean.domain.OSupplyerOrder;
import com.okwei.bean.domain.TOrderBackTotal;
import com.okwei.bean.domain.UCancleOrderAmoutDetail;
import com.okwei.bean.domain.UOrderAmoutDetail;
import com.okwei.bean.domain.UTradingDetails;
import com.okwei.bean.enums.OrderStatusEnum;
import com.okwei.bean.enums.OrderTypeEnum;
import com.okwei.bean.enums.PayTypeEnum;
import com.okwei.bean.enums.UserAmountType;
import com.okwei.bean.enums.userAmountStatus;
import com.okwei.dao.impl.BaseDAO;
import com.okwei.service.impl.BaseService;
import com.okwei.supplyportal.bean.enums.LtwoTypeEnum;
import com.okwei.supplyportal.bean.enums.ReFundStatusEnum;
import com.okwei.supplyportal.bean.enums.RefundTypeEnum;
import com.okwei.supplyportal.dao.IOrderManageDAO;
import com.okwei.supplyportal.service.IConfirmRefundService;

@Service("refundService")
public class ConfirmRefundService extends BaseService implements IConfirmRefundService {
    @Autowired
    private BaseDAO baseDAO;
    @Autowired
    private IOrderManageDAO orderBase;

    private Log logger = LogFactory.getLog(this.getClass());

    @Override
    public List<Long> refundPenny(long sellerID, long refundID) {
	// logger.error("分钱开始："+refundID+"人："+sellerID);
	List<Long> result = new ArrayList<Long>();
	/*-------------------------------查询退款的信息---------------------------------*/
	// 首先查找退款记录
	TOrderBackTotal refOrder = getRefundOrder(sellerID, refundID);
	if (refOrder == null)
	    throw new RuntimeException();
	// 验证该订单是否到了分钱的状态
	// 退款类型
	short type = refOrder.getType();
	// 订单状态
	short refundState = refOrder.getBackStatus();
	if (type == 1) {
	    // 1.退款
	    if (!(refundState == Short.parseShort(ReFundStatusEnum.ShenQingZhong.toString()) || refundState == Short.parseShort(ReFundStatusEnum.WeiDianIn.toString()))) {
		throw new RuntimeException();
	    }
	} else if (type == 2) {
	    // 2.退货
	    if (refundState != Short.parseShort(ReFundStatusEnum.BuyerFaHuo.toString())) {
		throw new RuntimeException();
	    }
	} else {
	    throw new RuntimeException();
	}
	// logger.error("开始查询供应商订单");
	// 查询供应商订单
	OSupplyerOrder supOrder = getSupOrder(refOrder.getSupplierOrderId());
	if (supOrder == null) {
	    throw new RuntimeException();
	}
	// 退款金额
	double refundAmout = refOrder.getRefundAmout();
	// 订单总金额
	double totalAmount = supOrder.getTotalPrice() + supOrder.getPostage();
	// logger.error("已退款的金额");
	// 已退款的金额
	double yRefundAmount = getRefundedAmout(refOrder.getSupplierOrderId());
	// 查询该供应商已退款的金额
	if (refundAmout > (totalAmount - yRefundAmount)) {
	    throw new RuntimeException();
	}

	// logger.error("查询退款的产品订单");
	// 查询退款的产品订单
	List<OProductOrder> proList = getProList(refOrder.getSupplierOrderId(), refOrder.getBackOrder());
	if (proList == null || proList.size() <= 0) {
	    throw new RuntimeException();
	}
	/*-------------------------------退款金额处理---------------------------------*/
	// logger.error("退款金额处理");
	List<UTradingDetails> tradList = getTradingList(refOrder.getSupplierOrderId());
	if (tradList == null || tradList.size() < 0) {
	    throw new RuntimeException();
	}
	// 已处理退款金额
	double deductedAmount = 0;
	// 1.先退佣金
	// logger.error("先退佣金");
	for (OProductOrder pro : proList) {
	    boolean flag = false;
	    for (UTradingDetails trading : tradList) {
		if (pro.getProductOrderId().equals(trading.getProductOrder()) && trading.getType().equals(Short.parseShort(UserAmountType.orderYj.toString()))) {
		    flag = true;
		    trading.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    trading.setSurplusAmout(0d);
		    trading.setInTime(new Date());
		    baseDAO.update(trading);
		    // 插入一条退款的佣金的记录
		    UTradingDetails temp = new UTradingDetails();
		    temp.setWeiId(trading.getWeiId());
		    temp.setSupplyOrder(trading.getSupplyOrder());
		    temp.setOrderNo(trading.getOrderNo());
		    temp.setAmount(trading.getAmount() * -1);// 退款负的金额
		    temp.setType(Short.parseShort(UserAmountType.refund.toString()));
		    temp.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    temp.setLtwoType(trading.getType());
		    temp.setSurplusAmout(0d);
		    temp.setCreateTime(new Date());
		    baseDAO.save(temp);
		    deductedAmount += trading.getAmount();
		    if (!result.contains(trading.getWeiId())) {
			result.add(trading.getWeiId());
		    }
		}
	    }
	    if (!flag) {
		logger.error("退款：供应商订单号" + supOrder.getSupplierOrderId() + "，产品订单号：" + pro.getProductId() + "退佣金失败");
	    }
	}
	// logger.error("不是云商通的单退抽成");
	// 2.不是云商通的单退抽成
	if (supOrder.getOrderType().intValue() != Integer.parseInt(OrderTypeEnum.Pt.toString())) {
	    // 按比例退抽成
	    double scale = refundAmout / totalAmount;
	    scale = scale > 1 ? 1 : scale;
	    for (UTradingDetails trading : tradList) {
		if (trading.getType().equals(Short.parseShort(UserAmountType.rzYj.toString())) && trading.getLtwoType().equals(Short.parseShort(LtwoTypeEnum.BookCut.toString()))) {
		    double surAmout = trading.getSurplusAmout() * (1 - scale);
		    surAmout = surAmout < 0 ? 0 : surAmout;
		    trading.setSurplusAmout(surAmout);
		    trading.setInTime(new Date());
		    // 如果是整单退款 状态为已放款
		    if (refOrder.getSingle().shortValue() == 1) {
			trading.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    }
		    baseDAO.update(trading);
		    // 插入一条退款抽成的记录
		    double amount = trading.getAmount() * scale;
		    UTradingDetails temp = new UTradingDetails();
		    temp.setWeiId(trading.getWeiId());
		    temp.setSupplyOrder(trading.getSupplyOrder());
		    temp.setOrderNo(trading.getOrderNo());
		    temp.setAmount(amount * -1);// 退款负的金额
		    temp.setType(Short.parseShort(UserAmountType.refund.toString()));
		    if (refOrder.getSingle().shortValue() == 1) {
			temp.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    } else {
			temp.setState(trading.getState());
		    }
		    temp.setLtwoType(trading.getType());
		    temp.setSurplusAmout(0d);
		    temp.setCreateTime(new Date());
		    baseDAO.save(temp);
		    deductedAmount += amount;
		    if (!result.contains(trading.getWeiId())) {
			result.add(trading.getWeiId());
		    }
		}
	    }
	}
	// logger.error("扣货款");
	// 3.扣货款
	for (UTradingDetails trading : tradList) {
	    if (trading.getWeiId().equals(sellerID) && trading.getType().equals(Short.parseShort(UserAmountType.supplyPrice.toString()))) {
		// 货款还需要退款的金额
		double amount = refundAmout - deductedAmount;
		if (amount > 0) {
		    double surAmout = trading.getSurplusAmout() - amount;
		    surAmout = surAmout < 0 ? 0 : surAmout;
		    trading.setSurplusAmout(surAmout);
		    trading.setInTime(new Date());
		    // 如果是整单退款 状态为已放款
		    if (refOrder.getSingle().shortValue() == 1) {
			trading.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    }
		    baseDAO.update(trading);
		    // 插入一条退款的记录
		    UTradingDetails temp = new UTradingDetails();
		    temp.setWeiId(trading.getWeiId());
		    temp.setSupplyOrder(trading.getSupplyOrder());
		    temp.setOrderNo(trading.getOrderNo());
		    temp.setAmount(amount * -1);// 退款负的金额
		    temp.setType(Short.parseShort(UserAmountType.refund.toString()));
		    if (refOrder.getSingle().shortValue() == 1) {
			temp.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
		    } else {
			temp.setState(trading.getState());
		    }
		    temp.setLtwoType(trading.getType());
		    temp.setSurplusAmout(0d);
		    temp.setCreateTime(new Date());
		    baseDAO.save(temp);
		    if (!result.contains(sellerID)) {
			result.add(sellerID);
		    }
		}
		break;
	    }
	}
	// logger.error("给买家退款，钱从哪里来，回哪里去");
	// 4.给买家退款，钱从哪里来，回哪里去。
	// 查询支付订单
	OPayOrder payOrder = getParOrder(supOrder.getPayOrderId());
	if (payOrder == null)
	    throw new RuntimeException();

	// logger.error("微钱包支付");
	// 微钱包支付
	UTradingDetails temp = new UTradingDetails();
	temp.setWeiId(supOrder.getBuyerID());
	temp.setSupplyOrder(refOrder.getSupplierOrderId());
	temp.setOrderNo(supOrder.getPayOrderId());
	temp.setType(Short.parseShort(UserAmountType.buyerPrice.toString()));
	temp.setState(Short.parseShort(userAmountStatus.yiFangKuan.toString()));
	temp.setLtwoType((short) 0);
	temp.setCreateTime(new Date());

	// logger.error("银行卡支付");
	// 银行卡支付
	UCancleOrderAmoutDetail model = new UCancleOrderAmoutDetail();
	model.setWeiId(supOrder.getBuyerID());
	model.setrId(refOrder.getBackOrder());
	model.setTkorderNo(supOrder.getSupplierOrderId());
	model.setOrderNo(supOrder.getPayOrderId());
	model.setPayType(payOrder.getPayType());
	model.setTransactionType((short) supOrder.getOrderType().intValue());
	model.setRefundType(Short.parseShort(RefundTypeEnum.gouwu.toString()));
	model.setCounterFee(0d);
	model.setCreateTime(new Date());
	model.setState((short) 0);
	model.setType((short) 2);

	if (!result.contains(supOrder.getBuyerID())) {
	    result.add(supOrder.getBuyerID());
	}
	if (payOrder.getPayType().equals(Short.parseShort(PayTypeEnum.WeiWallet.toString()))) {
	    // 插入一条退款到买家微钱包的记录
	    // logger.error("插入一条退款到买家微钱包的记录");
	    temp.setAmount(refundAmout);// 退款的金额
	    temp.setSurplusAmout(0d);
	    baseDAO.save(temp);
	    rollBackAmount(supOrder.getPayOrderId(), refundAmout);
	} else {
	    // 银行卡支付金额
	    if (payOrder.getWalletmoney() > 0) {
		// 部分银行卡支付，部分微钱包支付
		// 银行卡剩余退款的金额
		double backAmount = payOrder.getTotalPrice() - payOrder.getWalletmoney() - yRefundAmount;
		if (backAmount > 0) {
		    // 说明银行卡支付的没有退完
		    if (refundAmout < backAmount) {
			// 如果退款金额小于银行卡剩余退款的金额，只需要退款到银行卡
			model.setAmount(refundAmout);
			baseDAO.save(model);
		    } else {
			// 其他情况一部分退到银行卡，一部分退到微钱包
			model.setAmount(backAmount);
			baseDAO.save(model);

			temp.setAmount(refundAmout - backAmount);
			temp.setSurplusAmout(0d);
			baseDAO.save(temp);
			rollBackAmount(supOrder.getPayOrderId(), refundAmout - backAmount);
		    }
		} else {
		    // 银行卡部分已经退完，剩余金额全部退微钱包
		    temp.setAmount(refundAmout);// 退款的金额
		    temp.setSurplusAmout(0d);
		    baseDAO.save(temp);
		    rollBackAmount(supOrder.getPayOrderId(), refundAmout);
		}

	    } else {
		model.setAmount(refundAmout);
		baseDAO.save(model);
	    }
	}
	// logger.error("修改订单状态");
	// 5.修改订单状态
	if (refOrder.getSingle().shortValue() == 1) {
	    // 整单退 订单状态改为退款中
	    supOrder.setState(Short.parseShort(OrderStatusEnum.Refunded.toString()));
	} else {
	    // 非整单退 订单状态改为原先的状态
	    supOrder.setState(refOrder.getOistatus());
	}
	baseDAO.update(supOrder);
	// 修改退款记录的状态
	refOrder.setBackStatus(Short.parseShort(ReFundStatusEnum.GysQueRen.toString()));
	baseDAO.update(refOrder);
	return result;
    }

    /**
     * 如果有退回为钱包的，回滚金额 SurplusAmout
     */
    private void rollBackAmount(String payOrderID, double refundAmount) {
	try {
	    String hql = "select detailId,weiId,amout,sum(amoutWater),type from UOrderAmoutDetail where orderNo=? group by detailId,weiId order by oadid desc";
	    List<Object[]> list = baseDAO.find(hql, new Object[] { payOrderID });
	    if (list != null && list.size() > 0) {
		for (Object[] obj : list) {
		    double amoutWater = (double) obj[3];
		    if (amoutWater >= 0) {
			continue;
		    }
		    try {
			long detailId = (long) obj[0];
			long weiId = (long) obj[1];
			double amout = (double) obj[2];
			short type = (short) obj[4];
			if (refundAmount > (amoutWater * -1)) {
			    // 这条记录全部还完
			    hql = "from UTradingDetails where detailId=? and weiId=?";
			    UTradingDetails entity = baseDAO.getUniqueResultByHql(hql, new Object[] { detailId, weiId });
			    entity.setSurplusAmout(entity.getSurplusAmout() + amoutWater * -1);
			    baseDAO.update(entity);
			    UOrderAmoutDetail model = new UOrderAmoutDetail();
			    model.setDetailId(detailId);
			    model.setWeiId(weiId);
			    model.setOrderNo(payOrderID);
			    model.setAmout(amout);
			    model.setAmoutWater(amoutWater * -1);
			    model.setType(type);
			    model.setCreateTime(new Date());
			    baseDAO.save(model);
			    refundAmount += amoutWater;
			} else {
			    if (refundAmount > 0) {
				hql = "from UTradingDetails where detailId=? and weiId=?";
				UTradingDetails entity = baseDAO.getUniqueResultByHql(hql, new Object[] { detailId, weiId });
				entity.setSurplusAmout(entity.getSurplusAmout() + refundAmount);
				baseDAO.update(entity);
				UOrderAmoutDetail model = new UOrderAmoutDetail();
				model.setDetailId(detailId);
				model.setWeiId(weiId);
				model.setOrderNo(payOrderID);
				model.setAmout(amout);
				model.setAmoutWater(refundAmount);
				model.setType(type);
				model.setCreateTime(new Date());
				baseDAO.save(model);
			    }
			    break;
			}
		    } catch (Exception e) {
		    }
		}
	    }
	} catch (Exception e) {
	}
    }

    /**
     * 已经退款的金额
     * 
     * @param supOrderID
     * @return
     */
    private double getRefundedAmout(String supOrderID) {
	double amout = 0d;
	String hql = "select sum(refundAmout) from TOrderBackTotal where supplierOrderId=? and backStatus=?";
	List<Object[]> list = baseDAO.find(hql, new Object[] { supOrderID, Short.parseShort(ReFundStatusEnum.GysQueRen.toString()) });
	if (list != null && list.size() > 0) {
	    Object b = list.get(0);
	    if (b != null) {
		amout = (double) b;
	    }
	}
	return amout;
    }

    /**
     * 查询该供应商的支付订单
     * 
     * @param payOrderID
     * @return
     */
    private OPayOrder getParOrder(String payOrderID) {
	String hql = "from OPayOrder where payOrderId=?";
	return baseDAO.getUniqueResultByHql(hql, new Object[] { payOrderID });
    }

    /**
     * 查询该供应商的佣金记录
     * 
     * @param supOrderID
     * @return
     */
    private List<UTradingDetails> getTradingList(String supOrderID) {
	String hql = "from UTradingDetails where supplyOrder=?";
	return baseDAO.find(hql, new Object[] { supOrderID });
    }

    /**
     * 查询退款的产品
     * 
     * @param supOrderID
     * @param backOrder
     * @return
     */
    private List<OProductOrder> getProList(String supOrderID, Long backOrder) {
	String hql = "from OProductOrder where supplierOrderId=? and backOrder=?";
	return baseDAO.find(hql, new Object[] { supOrderID, backOrder });
    }

    /**
     * 获取供应商订单
     * 
     * @param supOrderID
     * @return
     */
    private OSupplyerOrder getSupOrder(String supOrderID) {
	String hql = "from OSupplyerOrder where supplierOrderId=?";
	return baseDAO.getUniqueResultByHql(hql, new Object[] { supOrderID });
    }

    /**
     * 查询退款记录
     * 
     * @param sellerID
     * @param refundID
     * @return
     */
    private TOrderBackTotal getRefundOrder(long sellerID, long refundID) {
	String hql = "from TOrderBackTotal where backOrder=? and sellerId=?";
	return baseDAO.getUniqueResultByHql(hql, new Object[] { refundID, sellerID });
    }

    /**
     * 更新微店钱包
     */
    @Override
    public void updateByWeiId(List<Long> weiList) {
	if (weiList != null) {
	    for (Long wid : weiList) {
		orderBase.updateWallet(wid);
	    }
	}
    }
}
